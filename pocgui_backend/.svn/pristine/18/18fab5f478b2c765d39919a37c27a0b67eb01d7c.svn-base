package com.mobigen.cdev.datagw.module.test.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.assertj.core.api.Assertions;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpSession;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mobigen.cdev.datagw.core.security.dto.ResultSmsAuthDto;
import com.mobigen.cdev.datagw.core.security.util.sha.SHAUtil;

@SpringBootTest
@AutoConfigureMockMvc
@Disabled
public class UserManageControllerTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@Autowired
	private ObjectMapper objectMapper;
	
	MockHttpSession session;
	
	@BeforeEach
	@Disabled
    @DisplayName("DataGW에서 사용 할 Login 인증 TEST")
    public void loginProcTest() throws Exception {
    	
    	// given
    	String userId = "PTN1889130";
    	String userPwdEx = "!ckdtprl10!";
    	String userPwd = userId + userPwdEx;
    	    	
    	userPwdEx = SHAUtil.sha512(userPwdEx);
    	userPwd = SHAUtil.sha512(userPwd);
    	
    	// when
    	session = new MockHttpSession();
    	
    	MvcResult result = 
			mockMvc.perform(
				// MockMvcRequestBuilders.get("/login/loginProc")
				MockMvcRequestBuilders.get("/login/loginAuth")
				.param("userId", userId)
				.param("userPwdEx", userPwdEx)
				.param("userPwd", userPwd)
				.session(session)
			)
			.andExpect(status().isOk())
			.andReturn();
    	
    	String content = result.getResponse().getContentAsString();
    	
		JSONObject jsonObject = new JSONObject(content);
		String rsResult = jsonObject.getString("result");
		    	
		String publicKey = "xd0f9sdjfe";
		String authType = "LOGIN";
		String refMenuCode = "LOGIN";
						
		Assertions.assertThat(rsResult).isEqualTo("1");
		
		result = 
			mockMvc.perform(
				MockMvcRequestBuilders.get("/login/sendSmsAuthenticationCode")
				.param("publicKey", publicKey)
				.param("authType", authType)
				.param("refMenuCode", refMenuCode)
				.session(session)
			)
			.andExpect(status().isOk())
			.andReturn();
		
		content = result.getResponse().getContentAsString();
		jsonObject = new JSONObject(content);
		
		JSONObject resultRs = jsonObject.getJSONObject("rs");
		String smsCode = resultRs.getString("smsCode");
		
		System.out.println("SMS Code : " + smsCode);
		
		result = 
				mockMvc.perform(
					MockMvcRequestBuilders.get("/login/verifyAuthenticationCode")
					.param("publicKey", publicKey)
					.param("smsCode", smsCode)
					.session(session)
				)
				.andExpect(status().isOk())
				.andReturn();
		
		content = result.getResponse().getContentAsString();
		jsonObject = new JSONObject(content);
		resultRs = jsonObject.getJSONObject("rs");
		
		
		// then
		Assertions.assertThat(resultRs.getString("authFlowStage")).isEqualTo(ResultSmsAuthDto.STAGE_AUTH_PASSED);
		
    }
	
	@Test
	@Disabled
	@DisplayName("Merge Into User List Test")
	void mergeIntoUserListTest() throws Exception {
		
		// Get방식 Param
		MultiValueMap<String, String> multiValueMap = new LinkedMultiValueMap<String, String>();
		multiValueMap.add("userId", "ALL");
		
		// Post방식 Param
		String content = objectMapper.writeValueAsString(multiValueMap);
		
		
		MvcResult result = 
			mockMvc.perform(
				MockMvcRequestBuilders
				.post("/usermanage/mergeUserInfoFromTpani")
				.accept(MediaType.APPLICATION_JSON_VALUE)
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				.content(content)
				.session(session)
			)
			.andExpect(status().isOk())
			.andReturn();
			
		String response = result.getResponse().getContentAsString();
		JSONObject jsonObject = new JSONObject(response);
		int updateCnt = Integer.parseInt(jsonObject.getString("rs"));
		
		// then
		Assertions.assertThat(updateCnt).isGreaterThan(0);
		
	}
	
	
}
