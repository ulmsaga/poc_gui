package com.mobigen.cdev.datagw.module.collect.interfacesource.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.mobigen.cdev.datagw.module.collect.interfacesource.dto.DataManageDetailDefDto;
import com.mobigen.cdev.datagw.module.collect.interfacesource.dto.ResultDataRegDto;
import com.mobigen.cdev.datagw.module.collect.interfacesource.service.CollectInterfaceSourceService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.mobigen.cdev.datagw.core.base.dto.RsResultDto;

@RestController
@RequestMapping("collect/interfacesource")
public class CollectInterfaceSourceController {
  private final CollectInterfaceSourceService collectInterfaceSourceService;

  @SuppressWarnings("unused")
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
  
  public CollectInterfaceSourceController(CollectInterfaceSourceService collectInterfaceSourceService) {
    this.collectInterfaceSourceService = collectInterfaceSourceService;
  }

  @PostMapping(value = "/getDataMainList", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> getDataMainList(@RequestBody Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
		RsResultDto result = new RsResultDto();
		result.setRs(collectInterfaceSourceService.getDataMainList(param));
		return ResponseEntity.ok(result);
	}

	@PostMapping(value = "/getDataMainListExcel", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> getDataMainListExcel(@RequestBody Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
		RsResultDto result = new RsResultDto();
		result.setRs(collectInterfaceSourceService.getDataMainListExcel(param));
		return ResponseEntity.ok(result);
	}
  
  @PostMapping(value = "/getDataDetailList", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> getDataDetailList(@RequestBody Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
		RsResultDto result = new RsResultDto();

		DataManageDetailDefDto detailDef = new DataManageDetailDefDto();
		detailDef.setSourceInfo(collectInterfaceSourceService.getDataDetailList(param));
		detailDef.setInterfaceTopicList(collectInterfaceSourceService.getInterfaceTopicList(param));
		detailDef.setInterfaceFileList(collectInterfaceSourceService.getInterfaceAddedFileList(param));

		result.setRs(detailDef);
		return ResponseEntity.ok(result);
	}

	@PostMapping(value = "/getDataMainJsonPropertyList", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> getDataMainJsonPropertyList(@RequestBody Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
		RsResultDto result = new RsResultDto();
		result.setRs(collectInterfaceSourceService.getDataMainJsonPropertyList(param));
		return ResponseEntity.ok(result);
	}

	@PostMapping(value = "/getDataDetailJsonPropertyList", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> getDataDetailJsonPropertyList(@RequestBody Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
		RsResultDto result = new RsResultDto();
		result.setRs(collectInterfaceSourceService.getDataDetailJsonPropertyList(param));
		return ResponseEntity.ok(result);
	}

	@PostMapping(value = "/regDataInfo", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> regDataInfo(@RequestBody Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
		RsResultDto result = new RsResultDto();
		result.setRs(collectInterfaceSourceService.regDataInfo(param, request, response));
		return ResponseEntity.ok(result);
	}

	@SuppressWarnings("unchecked")
	@PostMapping(value = "/regDataInfoMultiPartForm", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> regDataInfoMultiPartForm(
      String interfaceType,
      String applyType,
			@RequestPart(value = "interfaceInfo") Map<String, Object> interfaceInfo,
			@RequestPart(value = "dataSourceInfo") Map<String, Object> dataSourceInfo,
			@RequestPart(value = "deletedInterfaceTopicInfo") Map<String, Object> deletedInterfaceTopicInfo,
			@RequestPart(value = "addedInterfaceTopicInfo") Map<String, Object> addedInterfaceTopicInfo,
			@RequestPart(value = "deletedInterfaceFileInfo") Map<String, Object> deletedInterfaceFileInfo,
			@RequestPart(value = "addedInterfaceFileInfo") Map<String, Object> addedInterfaceFileInfo,
			MultipartFile[] files,
			HttpServletRequest request,
			HttpServletResponse response) {
		RsResultDto result = new RsResultDto();

		Map<String, Object> paramInterface = (Map<String, Object>) interfaceInfo;
		List<Map<String, Object>> paramDataSourceList = (List<Map<String, Object>>) dataSourceInfo.get("list");
		List<Map<String, Object>> paramDelTopicList = (List<Map<String, Object>>) deletedInterfaceTopicInfo.get("list");
		List<Map<String, Object>> paramAddTopicList = (List<Map<String, Object>>) addedInterfaceTopicInfo.get("list");
		List<Map<String, Object>> paramDelFileList = (List<Map<String, Object>>) deletedInterfaceFileInfo.get("list");
		List<Map<String, Object>> paramAddFileList = (List<Map<String, Object>>) addedInterfaceFileInfo.get("list");
		
		// result.setRs(collectInterfaceSourceService.regDataInfoWithAddedFiles(interfaceType, applyType, paramInterface, paramDataSourceList, paramDelTopicList, paramAddTopicList, paramDelFileList, paramAddFileList, files, request, response));
		ResultDataRegDto resultDataRegDto = collectInterfaceSourceService.regDataInfoWithAddedFiles(interfaceType, applyType, paramInterface, paramDataSourceList, paramDelTopicList, paramAddTopicList, paramDelFileList, paramAddFileList, files, request, response);
		// regDataInfoWithAddedFiles 가 Transaction으로 묶여 있기 때문에 여기서 처리
		resultDataRegDto.setMainDataPackage(collectInterfaceSourceService.getDataMainList(resultDataRegDto.getSearchMainParam()));
		resultDataRegDto.setDetailDataPackage(collectInterfaceSourceService.getDataDetailList(resultDataRegDto.getSearchDetailParam()));
		result.setRs(resultDataRegDto);

		return ResponseEntity.ok(result);
	}

	@PostMapping(value = "/getCloudList", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> getCloudList(@RequestBody Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
		RsResultDto result = new RsResultDto();
		result.setRs(collectInterfaceSourceService.getCloudList(param));
		return ResponseEntity.ok(result);
	}

	@PostMapping(value = "/updateInterfaceUseYn", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<RsResultDto> updateInterfaceUseYn(@RequestBody Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
		RsResultDto result = new RsResultDto();
		result.setRs(collectInterfaceSourceService.updateInterfaceUseYn(param, request, response));
		return ResponseEntity.ok(result);
	}
  
}
