package com.mobigen.cdev.datagw.module.login.service;

import java.util.HashMap;
import java.util.Map;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import com.mobigen.cdev.datagw.core.base.dto.RsResultDto;
import com.mobigen.cdev.datagw.core.security.util.sha.SHAUtil;
import com.mobigen.cdev.datagw.module.login.dto.LoginResultDto;

@SpringBootTest
@Disabled
class LoginServiceImplTest {

    private final LoginService loginService;

    private MockHttpServletRequest request;
    private MockHttpServletResponse response;
    
    @Autowired
    LoginServiceImplTest(LoginService loginService) {
        this.loginService = loginService;
    }

    @Test
    @DisplayName("Login 인증 Test")
    void loginAuthentication() {
        // given
        String userId = "PTN1889130";
        Map<String, Object> param = new HashMap<>();
        param.put("userId", userId);
        param.put("userPwdEx", "99999");
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();

        // when
        LoginResultDto loginResultDto = loginService.loginAuth(param, request, response);

        // then
        Assertions.assertThat(loginResultDto.getUserInfoDto().getUser_id()).isEqualTo(userId);

    }

    @SuppressWarnings("unused")
    @Test
    @DisplayName("Login 후 Session 확인 TEST (인가용)")
    void isExistSession() {
        // given
        Map<String, Object> param = new HashMap<>();
        param.put("userId", "PTN1889130");
        param.put("userPwdEx", "99999");
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();

        // when
        LoginResultDto loginResultDto = loginService.loginAuth(param, request, response);
        boolean existSession = loginService.isAuthoritySession(request, response);

        // then
        Assertions.assertThat(existSession).isEqualTo(true);
    }
    
    
    @Test
    @DisplayName("TangoSSO LOCAL TEST")
    void loginTangoSso() {
    	// given
    	Map<String, Object> param = new HashMap<String, Object>();
    	String userId = "PTN1889130";
    	String userPwdEx = "!ckdtprl10!";
    	String userPwd = userId + userPwdEx;
    	userPwdEx = SHAUtil.sha512(userPwdEx);
    	userPwd = SHAUtil.sha512(userPwd);
    	
    	param.put("userId", userId);
    	param.put("userPwdEx", userPwdEx);
    	param.put("userPwd", userPwd);
    	
    	request = new MockHttpServletRequest();
    	response = new MockHttpServletResponse();
    	
    	// when
    	// LoginPolicy가 Tango SSO일 경우에만 loginProc 아닐경우 loginAuth (오류 안나게)
    	// LoginResultDto loginResultDto = loginService.loginProc(param, request, response);
    	LoginResultDto loginResultDto = loginService.loginAuth(param, request, response);
    	
    	// then
    	Assertions.assertThat(loginResultDto.getResult()).isEqualTo(RsResultDto.RESULT_SUCCESS);
    }

}