package com.mobigen.cdev.datagw.module.common.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mobigen.cdev.datagw.core.exception.RsRuntimeException;
import com.mobigen.cdev.datagw.core.file.dto.ExcelDto;
import com.mobigen.cdev.datagw.core.file.excel.handler.ExcelDefaultExceptionHandler;
import com.mobigen.cdev.datagw.core.security.annotation.LoginUser;
import com.mobigen.cdev.datagw.core.security.manage.session.SessionManage;
import com.mobigen.cdev.datagw.core.util.annotation.EnvStatus;
import com.mobigen.cdev.datagw.module.common.dto.common.CondValueTextDto;
import com.mobigen.cdev.datagw.module.common.dto.common.CondsDto;
import com.mobigen.cdev.datagw.module.common.dto.menu.MenuInfoDto;
import com.mobigen.cdev.datagw.module.common.dto.user.UserInfoDto;
import com.mobigen.cdev.datagw.module.common.dto.user.UserMapper;
import com.mobigen.cdev.datagw.module.common.entity.guiweb.CmUserEntity;
import com.mobigen.cdev.datagw.module.common.repository.jpa.guiweb.CmUserRepository;
import com.mobigen.cdev.datagw.module.common.repository.mybatis.CommonRepository;

@Service
public class CommonServiceImpl implements CommonService {

    private final CommonRepository commonRepository;
    private final CmUserRepository cmUserRepository;
		private final SessionManage sessionManage;

   	@SuppressWarnings("unused")
		private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    public CommonServiceImpl(CommonRepository commonRepository, CmUserRepository cmUserRepository, SessionManage sessionManage) {
        this.commonRepository = commonRepository;
        this.cmUserRepository = cmUserRepository;
				this.sessionManage = sessionManage;
    }

    @Override
    public List<UserInfoDto> getUserList(Map<String, Object> param) {
        param.put("checkUserPassYn", "N");
        return commonRepository.getUserList(param);
    }

    @Override
    public ExcelDto getUserListExcel(Map<String, Object> param) {
        ExcelDto excelDto = new ExcelDto();

        try {
            ExcelDefaultExceptionHandler resultHandler = new ExcelDefaultExceptionHandler(param);
            commonRepository.getUserListExcel(param, resultHandler);

            if("".equals(String.valueOf(param.get("sheetName")))) param.put("sheetName", "sheet1");
            if("".equals(String.valueOf(param.get("fileName")))) param.put("fileName", param.get("sheetName"));
            if("".equals(String.valueOf(param.get("fileExt")))) param.put("fileExt", "xlsx");

            excelDto.setFile_ext(String.valueOf(param.get("fileExt")));
            excelDto.setFile_name(String.valueOf(param.get("fileName")));
            excelDto.setTarget_file_path(resultHandler.execute());
        } catch (Exception e) {
            throw new RsRuntimeException("error.common.excel.file");
        }

        return excelDto;
    }

    @Override
    public List<UserInfoDto> getAllUserList() {
        List<UserInfoDto> ret = new ArrayList<>();
        List<CmUserEntity> entityList = cmUserRepository.findAll();
        for (CmUserEntity ent: entityList) {
            UserInfoDto userInfoDto = UserMapper.INSTANCE.userEntityToUserDto(ent);
            ret.add(userInfoDto);
        }

        return ret;
    }

  @Override
	public List<UserInfoDto> getUserPemdb1List(Map<String, Object> param) {
    	param.put("checkUserPassYn", "N");
      return commonRepository.getUserPemdb1List(param);
	}

	@Override
	@EnvStatus
	public void setParamEnvStatus(Map<String, Object> param) {}
	
	@Override
	@EnvStatus
	@LoginUser
	public List<MenuInfoDto> getUserMenuInfoList(Map<String, Object> param) {
		List<MenuInfoDto> ret = new ArrayList<MenuInfoDto>();
		List<MenuInfoDto> list = commonRepository.getUserMenuInfoList(param);
		ret = makeMenuInfoList(list, "00000000", false);
		return ret;
	}
	
	private List<MenuInfoDto> makeMenuInfoList(List<MenuInfoDto> list, String pCode, boolean isSubMenu) {
		List<MenuInfoDto> menuList = new ArrayList<MenuInfoDto>();
		MenuInfoDto menuInfoDto = null;
		for (MenuInfoDto m : list) {
			if (pCode.equals(m.getMenu_pcode())) {
				if (!isSubMenu) {
					// MAIN MENU (ROOT)
					if (m.getMenu_code().equals(m.getMenu_pcode_next())) {
						menuInfoDto = new MenuInfoDto();
						
						menuInfoDto.setMenu_pcode(m.getMenu_pcode());
						menuInfoDto.setMenu_code(m.getMenu_code());
						menuInfoDto.setMenu_order(m.getMenu_order());
						menuInfoDto.setMenu_type(m.getMenu_type());
						menuInfoDto.setMenu_name(m.getMenu_name());
						menuInfoDto.setMenu_navigation(m.getMenu_navigation());
						menuInfoDto.setMenu_location(m.getMenu_location());
						menuInfoDto.setEnd_flag(m.getEnd_flag());
						menuInfoDto.setAdmin_allow_lv(m.getAdmin_allow_lv());
						menuInfoDto.setModule_type(m.getModule_type());
						menuInfoDto.setModule_allow_lv(m.getModule_allow_lv());
						menuInfoDto.setSubMenuList(makeMenuInfoList(list, m.getMenu_code(), true));
						menuInfoDto.setDefault_menu_yn(m.getDefault_menu_yn());
						menuInfoDto.setReg_admin_allow_lv(m.getReg_admin_allow_lv());
						menuInfoDto.setReg_module_allow_lv(m.getReg_module_allow_lv());

						menuList.add(menuInfoDto);
					}
				} else {
					// SUB MENU
					if (m.getMenu_code().equals(m.getMenu_pcode_next())) {
						menuInfoDto = new MenuInfoDto();
						
						menuInfoDto.setMenu_pcode(m.getMenu_pcode());
						menuInfoDto.setMenu_code(m.getMenu_code());
						menuInfoDto.setMenu_order(m.getMenu_order());
						menuInfoDto.setMenu_type(m.getMenu_type());
						menuInfoDto.setMenu_name(m.getMenu_name());
						menuInfoDto.setMenu_navigation(m.getMenu_navigation());
						menuInfoDto.setMenu_location(m.getMenu_location());
						menuInfoDto.setEnd_flag(m.getEnd_flag());
						menuInfoDto.setAdmin_allow_lv(m.getAdmin_allow_lv());
						menuInfoDto.setModule_type(m.getModule_type());
						menuInfoDto.setModule_allow_lv(m.getModule_allow_lv());
						menuInfoDto.setSubMenuList(makeMenuInfoList(list, m.getMenu_code(), true));
						menuInfoDto.setDefault_menu_yn(m.getDefault_menu_yn());
						menuInfoDto.setReg_admin_allow_lv(m.getReg_admin_allow_lv());
						menuInfoDto.setReg_module_allow_lv(m.getReg_module_allow_lv());
					
						menuList.add(menuInfoDto);
					} else {
						menuList.add(m);
					}
				}
			}
		}
		return menuList;
	}

	@Override
	public MenuInfoDto getDefaultMenuInfo(Map<String, Object> param) {
		return commonRepository.getDefaultMenuInfo(param);
	}

	@Override
	public List<MenuInfoDto> getMenuInfoList(Map<String, Object> param) {
		return commonRepository.getMenuInfoList(param);
	}

	@Override
	public boolean isAuthoritySession(HttpServletRequest request, HttpServletResponse response) {
		return sessionManage.isFullAuthentication(request, response);
	}
	
	@Override
	public List<CondValueTextDto> getNmsCondList(Map<String,Object> param) {
		return commonRepository.getNmsCondList(param);
	}

	@Override
	public List<CondValueTextDto> getProtocolCondList(Map<String,Object> param) {
		return commonRepository.getProtocolCondList(param);
	}

	@Override
	public List<CondValueTextDto> getStatusCondList(Map<String,Object> param) {
		return commonRepository.getStatusCondList(param);
	}
	@Override
	public CondsDto getConds(Map<String, Object> param) {
		CondsDto condsDto = new CondsDto();
		condsDto.setNmsCondList(commonRepository.getNmsCondList(param));
		condsDto.setProtocolCondList(commonRepository.getProtocolCondList(param));
		condsDto.setStatusCondList(commonRepository.getStatusCondList(param));
		condsDto.setInterfaceCycleCondList(commonRepository.getInterfaceCycleCondList(param));
		return condsDto;
	}

	@Override
	public List<CondValueTextDto> getManagerCondList(Map<String, Object> param) {
		return commonRepository.getManagerCondList(param);
	}

	//
	//
	//
	//

	@Override
	public List<CondValueTextDto> getInterfaceCycleCondList(Map<String, Object> param) {
		return commonRepository.getInterfaceCycleCondList(param);
	}

	@Override
	public List<CondValueTextDto> getIpNetCondList(Map<String, Object> param) {
		return commonRepository.getIpNetCondList(param);
	}

	@Override
	public List<CondValueTextDto> getCloudList(Map<String, Object> param) {
		return commonRepository.getCloudList(param);
	}
}
