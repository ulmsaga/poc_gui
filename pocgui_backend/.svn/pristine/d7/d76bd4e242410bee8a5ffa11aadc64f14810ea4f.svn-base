package com.mobigen.cdev.datagw.module.provide.interfacesource.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.mobigen.cdev.datagw.core.exception.RsRuntimeException;
import com.mobigen.cdev.datagw.core.file.dto.ExcelDto;
import com.mobigen.cdev.datagw.core.file.dto.FileDto;
import com.mobigen.cdev.datagw.core.file.excel.handler.ExcelDefaultExceptionHandler;
import com.mobigen.cdev.datagw.core.file.manage.service.FileManageService;
import com.mobigen.cdev.datagw.core.security.manage.session.SessionManage;
import com.mobigen.cdev.datagw.core.util.annotation.EnvStatus;
import com.mobigen.cdev.datagw.module.provide.interfacesource.dto.ProvideDataManageDefDto;
import com.mobigen.cdev.datagw.module.provide.interfacesource.dto.ProvideInterfaceAddedFileDto;
import com.mobigen.cdev.datagw.module.provide.interfacesource.dto.ProvideInterfaceDto;
import com.mobigen.cdev.datagw.module.provide.interfacesource.dto.ProvideJsonPropertyDefDto;
import com.mobigen.cdev.datagw.module.provide.interfacesource.dto.ProvideResultDataRegDto;
import com.mobigen.cdev.datagw.module.provide.interfacesource.repository.mybatis.ProvideInterfaceSourceRepository;

@Service
@Transactional(readOnly = true)
public class ProvideInterfaceSourceServiceImpl implements ProvideInterfaceSourceService {

  private final ProvideInterfaceSourceRepository provideInterfaceSourceRepository;
  private final SessionManage sessionManage;
  private final Environment env;
  private final FileManageService fileManageService;
  @SuppressWarnings("unused")
  private final Logger logger = LoggerFactory.getLogger(this.getClass());

  public ProvideInterfaceSourceServiceImpl(final ProvideInterfaceSourceRepository provideInterfaceSourceRepository, SessionManage sessionManage, Environment env, FileManageService fileManageService) {
    this.provideInterfaceSourceRepository = provideInterfaceSourceRepository;
    this.sessionManage = sessionManage;
    this.env = env;
    this.fileManageService = fileManageService;
  }

  @Override
  @EnvStatus
  public ProvideDataManageDefDto getDataMainList(Map<String, Object> param) {
    
    ProvideDataManageDefDto dataMainDefDto = new ProvideDataManageDefDto();
    List<ProvideJsonPropertyDefDto> jsonPropertyList = getDataMainJsonPropertyList(param);
    List<String> jsonColumnList = new ArrayList<>();
    for (ProvideJsonPropertyDefDto jsonPropertyDefDto : jsonPropertyList) {
      jsonColumnList.add(jsonPropertyDefDto.getJson_columns());
    }
    param.put("jsonColumnList", jsonColumnList);
    List<?> dataMainList = provideInterfaceSourceRepository.getDataMainList(param);

    dataMainDefDto.setDataPropertyList(jsonPropertyList);
    dataMainDefDto.setDataList(dataMainList);
    return dataMainDefDto;
  }

  @Override
  @EnvStatus
  public ExcelDto getDataMainListExcel(Map<String, Object> param) {
    ExcelDto excelDto = new ExcelDto();

    try {
      ExcelDefaultExceptionHandler resultHandler = new ExcelDefaultExceptionHandler(param);

      //
      param.put("searchType", "EXCEL");
      List<ProvideJsonPropertyDefDto> jsonPropertyList = getDataMainJsonPropertyList(param);
      List<String> jsonColumnList = new ArrayList<>();
      for (ProvideJsonPropertyDefDto jsonPropertyDefDto : jsonPropertyList) {
        jsonColumnList.add(jsonPropertyDefDto.getJson_columns());
      }
      param.put("jsonColumnList", jsonColumnList);
      provideInterfaceSourceRepository.getDataMainListExcel(param, resultHandler);
      //

      if("".equals(String.valueOf(param.get("sheetName")))) param.put("sheetName", "sheet1");
      if("".equals(String.valueOf(param.get("fileName")))) param.put("fileName", param.get("sheetName"));
      if("".equals(String.valueOf(param.get("fileExt")))) param.put("fileExt", "xlsx");

      excelDto.setFile_ext(String.valueOf(param.get("fileExt")));
      excelDto.setFile_name(String.valueOf(param.get("fileName")));
      excelDto.setTarget_path_key(ExcelDto.FILE_PATH_CREATE_EXCEL);
      excelDto.setTarget_file(resultHandler.execute());
    } catch (Exception e) {
      throw new RsRuntimeException("error.common.excel.file");
    }

    return excelDto;
  }
  
  @Override
  @SuppressWarnings("unchecked")
  @EnvStatus
  public List<ProvideJsonPropertyDefDto> getDataMainJsonPropertyList(Map<String, Object> param) {
    String selectedBothFtp = "N";
    boolean isFtp = false;
    boolean isSftp = false;

    if (param.get("searchType") == null) param.put("searchType", "VIEW");
    if (param.get("protocolList") != null) {
      List<String> protocolList = (List<String>) param.get("protocolList");
      if (protocolList.size() == 0) {
        isSftp = true;
        isFtp = true;
      } else {
        for (String protocolCd : protocolList) {
          if ("SFTP".equals(protocolCd)) {
            isSftp = true;
          }
          if ("FTP".equals(protocolCd)) {
            isFtp = true;
          }
        }
      }
    }
    if (isFtp && isSftp) selectedBothFtp = "Y";
    param.put("selectedBothFtp", selectedBothFtp);
    return provideInterfaceSourceRepository.getDataMainJsonPropertyList(param);
  }
  @Override
  public List<ProvideInterfaceAddedFileDto> getInterfaceAddedFileList(Map<String, Object> param) {
    return provideInterfaceSourceRepository.getInterfaceAddedFileList(param);
  }

  @Override
  @SuppressWarnings("unchecked")
  @Transactional(transactionManager = "dataSourceTransactionManagerCollect")
  public ProvideResultDataRegDto regDataInfo(Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
    // ---------------------------------------------------------------------
    // DELETE 전용 :: applyType == "DEL"
    // ## NEW, NEW(COPY), MODIFY를 같이 처리 했으나 
    // ## FILE 업로드 기능이 추가 됨에 따라
    // ## DEL을 제외한 Action은 regCollectDataInfoWithAddedFiles 에서 처리
    // ## interfaceType 추가 ("collect", "provide")
    // ---------------------------------------------------------------------

    ProvideResultDataRegDto resultDataRegDto = new ProvideResultDataRegDto();
    int retCnt = 0;

    String userId = sessionManage.getUserByContextRepository(request, response).getUser_id();
    String envStatus = env.getProperty("spring.profiles.active");

    String interfaceType = ProvideInterfaceDto.INTERFACE_TYPE_PROVIDE;
    Map<String, Object> mainParam = (Map<String, Object>) param.get("interfaceInfo");
    String applyType = param.get("applyType").toString();
    
    mainParam.put("userId", userId);
    mainParam.put("envStatus", envStatus);
    if (param.get("interfaceType") != null) interfaceType = param.get("interfaceType").toString();
    mainParam.put("interfaceType", interfaceType);
    mainParam.put("applyType", applyType);

    // -------------------------
    // FILE
    retCnt = retCnt + provideInterfaceSourceRepository.deleteInterfaceFileInfo(mainParam);
    // INTERFACE MAIN
    retCnt = retCnt + provideInterfaceSourceRepository.mergeInterfaceInfo(mainParam);
    // -------------------------

    // -------------------------
    // FOR RESPOSE
    resultDataRegDto.setInterfaceType(interfaceType);
    resultDataRegDto.setInterface_id(mainParam.get("interface_id").toString());
    resultDataRegDto.setApplyType(applyType);
    resultDataRegDto.setRetCnt(retCnt);
    // -------------------------

    return resultDataRegDto;
  }

  @Override
  @Transactional(transactionManager = "dataSourceTransactionManagerCollect")
  public ProvideResultDataRegDto regDataInfoWithAddedFiles(String interfaceType, String applyType,
      Map<String, Object> paramInterface, List<Map<String, Object>> paramDataSourceList,
      List<Map<String, Object>> paramDelTopicList, List<Map<String, Object>> paramAddTopicList,
      List<Map<String, Object>> paramDelFileList, List<Map<String, Object>> paramAddFileList, MultipartFile[] paramFiles,
      HttpServletRequest request, HttpServletResponse response) {
    // ---------------------------------------------------------------------
    // INSERT, UPDATE 전용 :: applyType == "NEW", "COPY", "MOD"
    // ## FILE 업로드 기능이 추가 됨에 따라
    // ## DEL을 제외한 Action은 이곳 에서 처리
    // ## DEL은 regCollectDataInfo 에서 처리
    // ---------------------------------------------------------------------
    ProvideResultDataRegDto resultDataRegDto = new ProvideResultDataRegDto();
    int retCnt = 0;

    String userId = sessionManage.getUserByContextRepository(request, response).getUser_id();
    String envStatus = env.getProperty("spring.profiles.active");

    //-----------------
    //
    Map<String, Object> mainParam = paramInterface;
    String newInterfaceId = "";

    mainParam.put("userId", userId);
    mainParam.put("envStatus", envStatus);
    mainParam.put("interfaceType", interfaceType);
    mainParam.put("applyType", applyType);
    
    // -----------
    // INTERFACE MAIN
    if (ProvideResultDataRegDto.APPLY_TYPE_NEW.equals(applyType) || ProvideResultDataRegDto.APPLY_TYPE_COPY.equals(applyType)) {
      StringBuilder sb = new StringBuilder();
      sb.append("P-");
      sb.append(mainParam.get("system_nm").toString()).append("-");
      sb.append(mainParam.get("protocol_cd").toString()).append("-");
      sb.append(mainParam.get("interface_cycle").toString()).append("-");
      mainParam.put("seq_key", sb.toString());
      newInterfaceId = provideInterfaceSourceRepository.getNewInterfaceIdByGeneratedProcedure(mainParam);
      mainParam.put("interface_id", newInterfaceId);
    }
    retCnt = provideInterfaceSourceRepository.mergeInterfaceInfo(mainParam);
    // INTERFACE MAIN END
    // -----------

    // -----------
    // FILES
    if (paramDelFileList != null && paramDelFileList.size() > 0) {
      for (Map<String, Object> paramDelFile : paramDelFileList) {
        paramDelFile.put("interfaceType", interfaceType);
        paramDelFile.put("applyType", applyType);
        retCnt = retCnt + provideInterfaceSourceRepository.deleteInterfaceFileInfo(paramDelFile);
      }
    }

    if (paramFiles != null && paramFiles.length > 0 ) {
      List<FileDto> retAddedFileList = fileManageService.updateMultipartFiles(paramFiles);
      if (retAddedFileList.size() > 0 && paramAddFileList.size() > 0) {
        for (FileDto fileDto : retAddedFileList) {
          for (Map<String, Object> paramAddFile : paramAddFileList) {
            if (fileDto.getClient_file_name().equals(paramAddFile.get("client_file_name").toString())) {
              paramAddFile.put("file_path", fileDto.getTarget_file_path());
              paramAddFile.put("file_name", fileDto.getFile_name());
              paramAddFile.put("userId", userId);
              paramAddFile.put("interfaceType", interfaceType);
              paramAddFile.put("applyType", applyType);
              if (ProvideResultDataRegDto.APPLY_TYPE_NEW.equals(applyType) || ProvideResultDataRegDto.APPLY_TYPE_COPY.equals(applyType)) {
                paramAddFile.put("interface_id", newInterfaceId);
              }
              retCnt = retCnt + provideInterfaceSourceRepository.insertInterfaceFileInfo(paramAddFile);
              continue;
            }
          }
        }
      }
    }
    // FILES END
    // -----------

    // -------------------------
    // FOR RESPOSE
    Map<String, Object> searchParam = new HashMap<>();
    searchParam.put("interfaceType", interfaceType);
    searchParam.put("interfaceId", mainParam.get("interface_id").toString());
    searchParam.put("protocolCd", mainParam.get("protocol_cd").toString());
    searchParam.put("tableNm", interfaceType + "_interface");
    resultDataRegDto.setInterfaceType(interfaceType);
    resultDataRegDto.setInterface_id(mainParam.get("interface_id").toString());
    resultDataRegDto.setApplyType(applyType);

    // param만 정리 하고 data는 밖에서 처리. (Transaction으로 묶여 있어서 여기는 의미 없음)
    resultDataRegDto.setSearchMainParam(searchParam);
    
    // resultDataRegDto.setMainDataPackage(getDataMainList(searchParam));
    
    // searchParam.put("tableNm", interfaceType + "_source");
    // resultDataRegDto.setSearchDetailParam(searchParam);
    // resultDataRegDto.setDetailDataPackage(getDataDetailList(searchParam));
        
    resultDataRegDto.setRetCnt(retCnt);
    // -------------------------

    return resultDataRegDto;
  }

  @Override
  @EnvStatus
  public ProvideResultDataRegDto updateInterfaceUseYn(Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) {
    ProvideResultDataRegDto resultDataRegDto = new ProvideResultDataRegDto();

    String interfaceType = ProvideInterfaceDto.INTERFACE_TYPE_PROVIDE;
    String interfaceId = "";
    
    if (param.get("interface_type") !=null) interfaceType = param.get("interface_type").toString();
    if (param.get("interface_id") != null) interfaceId = param.get("interface_id").toString();

    String userId = sessionManage.getUserByContextRepository(request, response).getUser_id();
    String envStatus = env.getProperty("spring.profiles.active");

    param.put("userId", userId);
    param.put("envStatus", envStatus);

    int retCnt = provideInterfaceSourceRepository.updateInterfaceUseYn(param);
    resultDataRegDto.setInterfaceType(interfaceType);
    resultDataRegDto.setRetCnt(retCnt);
    resultDataRegDto.setInterface_id(interfaceId);
    
    return resultDataRegDto;
  }

  
}
