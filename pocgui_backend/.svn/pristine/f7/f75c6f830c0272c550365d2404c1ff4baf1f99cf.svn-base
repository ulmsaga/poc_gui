<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mobigen.cdev.mapper.mysql.module.collect.history">

  <!--  -->
  <!-- def_tables -->
  <sql id="def_table_history">
    <if test='interfaceType eq "collect".toString()'>
      collect_hist
    </if>
    <if test='interfaceType eq "provide".toString()'>
      <include refid="com.mobigen.cdev.mapper.mysql.module.provide.history.def_table_history"/>
    </if>
  </sql>
  <sql id="def_table_retry">
    <if test='interfaceType eq "collect".toString()'>
      collect_retry
    </if>
    <if test='interfaceType eq "provide".toString()'>
      <include refid="com.mobigen.cdev.mapper.mysql.module.provide.history.def_table_retry"/>
    </if>
  </sql>

  <sql id="def_table_interface">
    <include refid="com.mobigen.cdev.mapper.mysql.module.collect.interfacesource.def_table_interface"/>
  </sql>
  <sql id="def_table_source">
    <include refid="com.mobigen.cdev.mapper.mysql.module.collect.interfacesource.def_table_source"/>
  </sql>

  <sql id="def_table_stat_status">
    stat_status
  </sql>

  <!-- def_tables -->
  <!--  -->

  <!--  -->
  <!-- history list -->
  <select id="getHistoryList" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.HistoryDto">
    <!-- PARAM : pagePerCount, currPage 필수 -->
    <include refid='com.mobigen.cdev.mapper.mysql.core.paging.pagingPreSQL' />
    <include refid='sqlGetHistoryList' />
    <include refid='com.mobigen.cdev.mapper.mysql.core.paging.pagingPostSQL' />
  </select>
  <select id="getHistoryListExcel" parameterType="map" resultType="java.util.HashMap">
    <include refid='sqlGetHistoryList' />
  </select>
  <sql id="sqlGetHistoryList">
    <include refid="sqlHistoryListSelectFrom" />
    <include refid="sqlHistoryListWhereCondDefault" />
    <include refid="sqlHistoryListOrderBy" />
  </sql>

  <!-- 2023.11.03-->
  <sql id="sqlHistoryListSelectFrom">
    SELECT
      <if test='interfaceType eq "collect".toString()'>
          A.collect_hist_id
        ,	DATE_FORMAT(A.collected_at, '%Y-%m-%dT%H:%i:%s') collected_at
        ,	A.collect_source_seq
      </if>
      <if test='interfaceType eq "provide".toString()'>
          A.provide_hist_id
        ,	DATE_FORMAT(A.provided_at, '%Y-%m-%dT%H:%i:%s') provided_at
        ,	A.provide_source_seq
      </if>
    ,	DATE_FORMAT(A.started_at, '%Y-%m-%d %H:%i:%s') started_at 
		,	DATE_FORMAT(A.ended_at, '%Y-%m-%d %H:%i:%s') ended_at  
    ,	A.interface_id
    ,	A.system_cd 
    ,	D.system_nm
    ,	B.interface_nm 
    ,	B.protocol_cd
    ,	B.interface_cycle
    , G.interface_cycle_nm
    ,	C.data_id
    ,	C.hdfs_dir
    ,	A.local_path 
    ,	A.dest_path
    ,	A.filenm
    ,	A.file_size
    ,	A.host_nm
    ,	A.target_dt
    ,	A.task_log_url
    ,	A.status_cd
    ,	CASE 
        WHEN IFNULL(E.status_nm, '-') = '-' THEN
          CASE
            WHEN A.status_cd = '200' THEN
              '200 OK'
            ELSE
              IFNULL(E.status_nm, '-')
            END
        ELSE
          E.status_nm
      END status_nm
    , E.description
    ,	A.err_msg
    , F.last_started_by

    <!-- -->
    <!-- -->
    <!-- Provide Info -->
    , G.interface_id provide_interface_id
    , G.interface_nm provide_interface_nm
    , G.protocol_cd provide_protocol_cd
    , G.detail_desc provide_detail_desc
    , G.db provide_db
    , G.tb provide_tb
    , G.run_by provide_run_by
    , G.provided_to provide_provided_to
    <!-- Provide Info -->
    <!-- -->
    <!-- -->

    ,	A.retry
    ,	CASE A.retry 
        WHEN '1' THEN '진행중'
        WHEN '0' THEN
          CASE IFNULL(F.retry_count, 0)
            WHEN 0 THEN '대기'
            ELSE '대기(이력있음)'
          END
      END retry_desc
    ,	IFNULL(F.retry_count, 0) retry_count
    FROM 
      <include refid="def_table_history" /> A
      LEFT OUTER JOIN
      <include refid="def_table_interface" /> B
      ON A.interface_id = B.interface_id
      LEFT OUTER JOIN
      <include refid="com.mobigen.cdev.mapper.mysql.module.common.def_common_interface_cycle" /> G
      ON B.interface_cycle = G.interface_cycle
      LEFT OUTER JOIN
      <include refid="def_table_source" /> C
      ON A.interface_id = C.interface_id
      <if test='interfaceType eq "collect".toString()'>
        AND A.collect_source_seq = C.collect_source_seq
      </if>
      <if test='interfaceType eq "provide".toString()'>
        AND A.provide_source_seq = C.provide_source_seq
      </if>

      <!-- -->
      <!-- -->
      <!-- Provide Info -->
      LEFT OUTER JOIN
      <include refid="com.mobigen.cdev.mapper.mysql.module.provide.interfacesource.def_table_interface" /> G
      ON fn_get_db_tb('DB', C.hdfs_dir) = G.db
      AND  fn_get_db_tb('TB', C.hdfs_dir) = G.tb
      <!-- Provide Info -->
      <!-- -->
      <!-- -->

      LEFT OUTER JOIN
      (
        SELECT
          <if test='interfaceType eq "collect".toString()'>
            collect_hist_id
          </if>
          <if test='interfaceType eq "provide".toString()'>
            provide_hist_id
          </if>
        , COUNT(*) retry_count
        ,	CASE
	        	WHEN COUNT(*) &gt; 1 THEN
        			CONCAT(substring_index(GROUP_CONCAT(CONCAT(B.user_name, '(', A.started_by , ' ', insa_team_name, ')') order by retry_id_seq desc), ',', 1), ' 외 ', COUNT(*) - 1, '명')
        		ELSE
        			GROUP_CONCAT( CONCAT(B.user_name, '(', A.started_by , ' ', insa_team_name, ')') )
        	END last_started_by
        FROM 
          <include refid="def_table_retry" /> A
        	LEFT OUTER JOIN (SELECT user_id, user_name, phone, insa_team_name FROM guiweb.cm_user WHERE use_yn  = 'Y') B 
        	ON A.started_by  = B.user_id
        GROUP BY
          <if test='interfaceType eq "collect".toString()'> collect_hist_id </if>
          <if test='interfaceType eq "provide".toString()'> provide_hist_id </if>
      ) F
      ON
        <if test='interfaceType eq "collect".toString()'> A.collect_hist_id = F.collect_hist_id </if>
        <if test='interfaceType eq "provide".toString()'> A.provide_hist_id = F.provide_hist_id </if>
      LEFT OUTER JOIN	system_code D
      ON A.system_cd = D.system_cd
      LEFT OUTER JOIN status_code E
      ON A.status_cd = E.status_cd
    WHERE 1 = 1
  </sql>
  <sql id="sqlHistoryListWhereCondDefault">
    AND started_at &gt;= DATE_FORMAT(#{startTime}, '%Y%m%d%H%i%s')
    AND started_at &lt;= DATE_FORMAT(#{endTime}, '%Y%m%d%H%i%s')

    <if test = 'interfaceId != null and interfaceId neq "".toString()'>
      AND (
                A.interface_id LIKE CONCAT('%', #{interfaceId}, '%')
            OR  A.interface_id regexp #{interfaceId}
          )
    </if>
    <if test = 'nmsList != null and nmsList.size != 0' >
      AND A.system_cd IN <foreach item="item" index="index" collection="nmsList" open="(" separator="," close=")">#{item}</foreach>
    </if>
    <if test = 'protocolList != null and protocolList.size != 0' >
      AND B.protocol_cd IN <foreach item="item" index="index" collection="protocolList" open="(" separator="," close=")">#{item}</foreach>
    </if>
    <if test = 'statusCodeList != null and statusCodeList.size != 0' >
      AND A.status_cd IN <foreach item="item" index="index" collection="statusCodeList" open="(" separator="," close=")">#{item}</foreach>
    </if>
    <if test = 'retryCondList != null and retryCondList.size != 0' >
      AND 
        (
          <foreach item="item" index="index" collection="retryCondList" open="(" separator="OR" close=")">
            <choose>
              <when test='item eq "2".toString()'>
                A.retry = '0' AND F.retry_count &gt; 0
              </when>
              <when test='item eq "0".toString()'>
                A.retry = '0' AND IFNULL(F.retry_count, 0) = 0
              </when>
              <otherwise>
                A.retry = #{item}
              </otherwise>
            </choose>
          </foreach>
        )
    </if>
    <if test = 'localPath != null and localPath neq "".toString()'>
      AND (
                A.local_path LIKE CONCAT('%', #{localPath}, '%')
            OR  A.local_path regexp #{localPath}
          )
    </if>
    <if test = 'destPath != null and destPath neq "".toString()'>
      AND (
                A.dest_path LIKE CONCAT('%', #{destPath}, '%')
            OR  A.dest_path regexp #{destPath}
          )
    </if>
    <if test = 'filenm != null and filenm neq "".toString()'>
      AND (
                A.filenm LIKE CONCAT('%', #{filenm}, '%')
            OR  A.filenm regexp #{filenm}
          )
    </if>
  </sql>
  <sql id="sqlHistoryListWhereCondHistId">
    <if test='interfaceType eq "collect".toString()'>
      AND A.collect_hist_id = #{collectHistId}
    </if>
    <if test='interfaceType eq "provide".toString()'>
      AND A.provide_hist_id = #{provideHistId}
    </if>
  </sql>
  <sql id="sqlHistoryListWhereCondHistIdList">
    <if test='interfaceType eq "collect".toString()'>
      AND A.collect_hist_id IN <foreach item="item" index="index" collection="collectHistIdList" open="(" separator="," close=")">#{item}</foreach>
    </if>
    <if test='interfaceType eq "provide".toString()'>
      AND A.provide_hist_id IN <foreach item="item" index="index" collection="provideHistIdList" open="(" separator="," close=")">#{item}</foreach>
    </if>
  </sql>
  <sql id="sqlHistoryListOrderBy">
    ORDER BY
      <if test='interfaceType eq "collect".toString()'> A.collect_hist_id DESC </if>
      <if test='interfaceType eq "provide".toString()'> A.provide_hist_id DESC </if>
  </sql>

  <!-- History List End-->
  <!--  -->
  
  <!-- -->
  <!-- Retry -->
  
  <!-- 2023.11.03 -->
  <!-- History By RestAPI Retry Finished Noti -->
  <select id="getHistoryListByHistId" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.CompleteEventDto">
    <include refid="sqlHistoryListSelectFrom" />
    <if test = 'histIdDataType eq "string".toString()'>
      <include refid="sqlHistoryListWhereCondHistId" />
    </if>
    <if test = 'histIdDataType eq "list".toString()'>
      <include refid="sqlHistoryListWhereCondHistIdList" />
    </if>
  </select>

  <select id="getNotFinishedRetryCount" parameterType="map" resultType="int">
    SELECT
      SUM(A.NOT_FINISHED_RETRY_COUNT) NOT_FINISHED_MAIN_DETAIL_TOT_COUNT
    FROM
      (
        SELECT 
          COUNT(*) NOT_FINISHED_RETRY_COUNT
        FROM
          <include refid="def_table_retry" />
        WHERE 1 = 1
        <if test='interfaceType eq "collect".toString()'>
          AND collect_hist_id = #{collect_hist_id}
        </if>
        <if test='interfaceType eq "provide".toString()'>
          AND provide_hist_id = #{provide_hist_id}
        </if>
        AND ended_at IS NULL
        UNION ALL
        SELECT
          COUNT(*) NOT_FINISHED_RETRY_COUNT
        FROM
          <include refid="def_table_history" />
        WHERE 1 = 1
          <if test='interfaceType eq "collect".toString()'>
            AND collect_hist_id = #{collect_hist_id}
          </if>
          <if test='interfaceType eq "provide".toString()'>
            AND provide_hist_id = #{provide_hist_id}
          </if>
        AND retry = 1
      ) A
  </select>

  <select id="getRetryCount" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.RetryCountDto" >
    SELECT
      A.not_finished_tot_retry_count
    , B.last_retry_count
    FROM
      (
        SELECT
          SUM(A.not_finished_retry_count) not_finished_tot_retry_count
        FROM
          (
            SELECT 
              COUNT(*) not_finished_retry_count
            FROM
              <include refid="def_table_retry" />
            WHERE 1 = 1
            <if test='interfaceType eq "collect".toString()'>
              AND collect_hist_id = #{collect_hist_id}
            </if>
            <if test='interfaceType eq "provide".toString()'>
              AND provide_hist_id = #{provide_hist_id}
            </if>
            AND ended_at IS NULL
            UNION ALL
            SELECT
              COUNT(*) not_finished_retry_count
            FROM
              <include refid="def_table_history" />
            WHERE 1 = 1
              <if test='interfaceType eq "collect".toString()'>
                AND collect_hist_id = #{collect_hist_id}
              </if>
              <if test='interfaceType eq "provide".toString()'>
                AND provide_hist_id = #{provide_hist_id}
              </if>
            AND retry = 1
          ) A
      ) A,
      (
        SELECT
          COUNT(*) last_retry_count
        FROM
          <include refid="def_table_retry" />
        WHERE 1 = 1
          <if test='interfaceType eq "collect".toString()'>
            AND collect_hist_id = #{collect_hist_id}
          </if>
          <if test='interfaceType eq "provide".toString()'>
            AND provide_hist_id = #{provide_hist_id}
          </if>
      ) B
  </select>

  <insert id="insertRetry" parameterType="map" useGeneratedKeys="true" keyProperty="retry_id_seq">
    INSERT INTO <include refid="def_table_retry" />
    (
    <if test='interfaceType eq "collect".toString()'>
      collect_hist_id
    </if>
    <if test='interfaceType eq "provide".toString()'>
      provide_hist_id
    </if>
    , started_at
    , started_by
    , status_cd
    )
    VALUES
    (
      <if test='interfaceType eq "collect".toString()'>
        #{collect_hist_id}
      </if>
      <if test='interfaceType eq "provide".toString()'>
        #{provide_hist_id}
      </if>
    , SYSDATE()
    , #{userId}
    , #{statusCd}
    )
  </insert>

  <update id="updateHistForRetry" parameterType="map">
    UPDATE <include refid="def_table_history" /> SET
      retry = 1
    WHERE 1 = 1
    <if test='interfaceType eq "collect".toString()'>
      AND collect_hist_id = #{collect_hist_id}
      AND collected_at = DATE_FORMAT(#{collected_at}, '%Y-%m-%d %H:%i:%s')
    </if>
    <if test='interfaceType eq "provide".toString()'>
      AND provide_hist_id = #{provide_hist_id}
      AND provided_at = DATE_FORMAT(#{provided_at}, '%Y-%m-%d %H:%i:%s')
    </if>
  </update>

  <update id="updateRetryForceTerminate" parameterType="map">
    UPDATE 
      <include refid="def_table_retry" /> A
    , (
        SELECT
          MAX(retry_id_seq) retry_id_seq
        FROM
          <include refid="def_table_retry" />
        WHERE 1 = 1
        <if test='interfaceType eq "collect".toString()'>
          AND collect_hist_id  = #{collect_hist_id}
        </if>
        <if test='interfaceType eq "provide".toString()'>
          AND provide_hist_id  = #{provide_hist_id}
        </if>
        <!-- AND status_cd = '6001' -->
        AND ended_at IS NULL
      ) B
    SET
      A.status_cd = #{statusCdForceTerminated}
    , A.err_msg = #{errMsgForceTerminated}
    , A.ended_at  = SYSDATE()
    WHERE A.retry_id_seq  = B.retry_id_seq
  </update>

  <select id="getRetryHistoryList" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.RetryDto">
    SELECT
      @ROWNUM:=@ROWNUM+1 rownum
    ,	A.retry_id_seq
    <if test='interfaceType eq "collect".toString()'>
      ,	A.collect_hist_id
    </if>
    <if test='interfaceType eq "provide".toString()'>
      ,	A.provide_hist_id
    </if>
    ,	DATE_FORMAT(A.started_at, '%Y-%m-%d %H:%i:%s') started_at
		,	DATE_FORMAT(A.ended_at, '%Y-%m-%d %H:%i:%s') ended_at
    ,	A.status_cd
    ,	CASE
            WHEN IFNULL(B.status_nm, '-') = '-' THEN
              CASE
                WHEN A.status_cd = '200' THEN
                  '200 OK'
                ELSE
                  IFNULL(B.status_nm, '-')
                END
            ELSE
              B.status_nm
          END status_nm
    ,	A.err_msg 
    ,	started_by 
    ,	CONCAT(C.user_name, '(', A.started_by , ' ', C.phone, ' ', C.INSA_TEAM_NAME , ')') started_by_desc
    ,	CASE WHEN IFNULL(A.ended_at, '-') = '-' THEN '1' ELSE '0' END retry_flag
    ,	CASE WHEN IFNULL(A.ended_at, '-') = '-' THEN '처리중' ELSE '완료' END retry_desc
    , A.task_log_url
    FROM 
    <include refid="def_table_retry" /> A
    LEFT OUTER JOIN status_code B
    ON A.status_cd = B.status_cd
    LEFT OUTER JOIN guiweb.cm_user C
    ON A.started_by = C.user_id
    WHERE 1 = 1
    <if test='interfaceType eq "collect".toString()'>
      AND collect_hist_id = #{collectHistId}
    </if>
    <if test='interfaceType eq "provide".toString()'>
      AND provide_hist_id = #{provideHistId}
    </if>
    AND (@ROWNUM:=0) = 0
    ORDER BY retry_id_seq  DESC
  </select>
  <!-- Retry -->
  <!-- -->


  <!--  -->
  <!-- SSE for Retry -->
  <select id="getNotFinishedRetryLongTermOrTerminated" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.RetryIdDto">
    SELECT
      #{interfaceType} interface_type
    , retry_id_seq
    <if test = 'interfaceType eq "collect".toString()'>
      , collect_hist_id hist_id
    </if>
    <if test = 'interfaceType eq "provide".toString()'>
      , provide_hist_id hist_id
    </if>
    FROM
      <include refid="def_table_retry" />
    WHERE 1 = 1
    AND 
      (
        (
          ended_at IS NULL AND started_at &lt; DATE_SUB(SYSDATE(), INTERVAL ${notFinishedCheckLastMin} MINUTE)
        )
        OR
        (
          status_cd = #{statusCdForceTerminated}
        )
      )
    <if test = 'targetRetryIdList != null and targetRetryIdList.size != 0'>
      AND retry_id_seq IN <foreach item="item" index="index" collection="targetRetryIdList" open="(" separator="," close=")">#{item}</foreach>
    </if>
  </select>

  <select id="getNotFinishedRetryIdList" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.RetryIdDto">
    SELECT
      MAX(retry_id_seq) retry_id_seq 
    <if test = 'interfaceType eq "collect".toString()'>
      , collect_hist_id hist_id
    </if>
    <if test = 'interfaceType eq "provide".toString()'>
      , provide_hist_id hist_id
    </if>
    FROM
      <include refid="def_table_retry" />
    WHERE 1 = 1
    AND ended_at IS NULL
    AND started_at &gt;=  DATE_SUB(SYSDATE(), INTERVAL ${notFinishedCheckLastMin} MINUTE)
    GROUP BY
      <if test = 'interfaceType eq "collect".toString()'> collect_hist_id </if>
      <if test = 'interfaceType eq "provide".toString()'> provide_hist_id </if>
  </select>

  <select id="getNotFinishedRetryIdListTest" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.RetryIdDto">
    SELECT
      1 retry_id_seq
    , 'collect_hist_id' hist_id
    FROM DUAL
  </select>

  <select id="getFinishedRetryIdList" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.RetryIdDto">
    SELECT
      retry_id_seq 
    <if test = 'interfaceType eq "collect".toString()'>
      , collect_hist_id hist_id
    </if>
    <if test = 'interfaceType eq "provide".toString()'>
      , provide_hist_id hist_id
    </if>
    FROM
      <include refid="def_table_retry" />
    WHERE 1 = 1
    AND ended_at IS NOT NULL
    AND status_cd != #{statusCdForceTerminated}
    <if test = 'targetRetryIdList != null and targetRetryIdList.size != 0'>
      AND retry_id_seq IN <foreach item="item" index="index" collection="targetRetryIdList" open="(" separator="," close=")">#{item}</foreach>
    </if>
  </select>

  <select id="getFinishedRetryEventList" parameterType="map" resultType="com.mobigen.cdev.datagw.module.collect.history.dto.CompleteEventDto">
    SELECT
    <if test = 'interfaceType eq "collect".toString()'>
        A.collect_hist_id
      ,	DATE_FORMAT(A.collected_at, '%Y-%m-%dT%H:%i:%s') collected_at
      ,	A.collect_source_seq
    </if>
    <if test = 'interfaceType eq "provide".toString()'>
        A.provide_hist_id
      ,	DATE_FORMAT(A.provided_at, '%Y-%m-%dT%H:%i:%s') provided_at
      ,	A.provide_source_seq
    </if>
    ,	DATE_FORMAT(A.started_at, '%Y-%m-%d %H:%i:%s') started_at 
    ,	DATE_FORMAT(A.ended_at, '%Y-%m-%d %H:%i:%s') ended_at
    ,	A.file_size
    ,	A.task_log_url
    ,	CASE 
        WHEN IFNULL(C.status_nm, '-') = '-' THEN
          CASE
            WHEN A.status_cd = '200' THEN
              '200 OK'
            ELSE
              IFNULL(C.status_nm, '-')
            END
        ELSE
          C.status_nm
      END status_nm
    ,	A.err_msg
    ,	B.started_by_desc last_started_by
    ,	A.retry
    ,	CASE A.retry 
      WHEN '1' THEN '진행중'
      WHEN '0' THEN
        CASE IFNULL(B.retry_count, 0)
          WHEN 0 THEN '대기'
          ELSE '대기(이력있음)'
            END
      END retry_desc
    ,	IFNULL(B.retry_count, 0) retry_count
    FROM
      (
        SELECT * FROM  <include refid="def_table_history" /> 
        WHERE 1 = 1
        AND
        <if test = 'interfaceType eq "collect".toString()'>
          collect_hist_id
        </if>
        <if test = 'interfaceType eq "provide".toString()'>
          provide_hist_id
        </if>
        IN <foreach item="item" index="index" collection="finishedHistRetryIdList" open="(" separator="," close=")">#{item.histId}</foreach>
      )
      A
      JOIN	
      (
        SELECT
            A.retry_id_seq
            <if test = 'interfaceType eq "collect".toString()'>
              ,	A.collect_hist_id
            </if>
            <if test = 'interfaceType eq "provide".toString()'>
              , A.provide_hist_id
            </if>
          ,	DATE_FORMAT(A.started_at, '%Y-%m-%d %H:%i:%s') started_at
          ,	DATE_FORMAT(A.ended_at, '%Y-%m-%d %H:%i:%s') ended_at
          ,	A.status_cd
          ,	CASE
                  WHEN IFNULL(B.status_nm, '-') = '-' THEN
                    CASE
                      WHEN A.status_cd = '200' THEN
                        '200 OK'
                      ELSE
                        IFNULL(B.status_nm, '-')
                      END
                  ELSE
                    B.status_nm
                END status_nm
          ,	A.err_msg 
          ,	started_by 
          ,	CONCAT(C.user_name, '(', A.started_by , ' ', C.phone, ' ', C.INSA_TEAM_NAME , ')') started_by_desc
          ,	CASE WHEN IFNULL(A.ended_at, '-') = '-' THEN '1' ELSE '0' END retry_flag
          ,	CASE WHEN IFNULL(A.ended_at, '-') = '-' THEN '처리중' ELSE '완료' END retry_desc
          ,	retry_count
          FROM 
            <include refid="def_table_retry" /> A
          JOIN (
            SELECT
              MAX(retry_id_seq) retry_id_seq
            <if test = 'interfaceType eq "collect".toString()'>
              ,	collect_hist_id
              ,	(SELECT COUNT(*) retry_count FROM <include refid="def_table_retry" />  WHERE collect_hist_id = A.collect_hist_id) retry_count
            </if>
            <if test = 'interfaceType eq "provide".toString()'>
              ,	provide_hist_id
              ,	(SELECT COUNT(*) retry_count FROM <include refid="def_table_retry" />  WHERE provide_hist_id = A.provide_hist_id) retry_count
            </if>

            FROM
              <include refid="def_table_retry" /> A
            WHERE 1 = 1
            AND status_cd != #{statusCdForceTerminated}
            <!-- AND retry_id_seq IN <foreach item="item" index="index" collection="finishedRetryIdList" open="(" separator="," close=")">#{item}</foreach>  -->
              AND 
                <foreach item="item" index="index" collection="finishedHistRetryIdList" open="((" separator=") OR (" close="))">
                    <if test = 'interfaceType eq "collect".toString()'>
                      collect_hist_id = #{item.histId}
                    </if>
                    <if test = 'interfaceType eq "provide".toString()'>
                      provide_hist_id = #{item.histId}
                    </if>
                  AND retry_id_seq = #{item.retryIdSeq}
                </foreach>
            GROUP BY
              <if test = 'interfaceType eq "collect".toString()'> collect_hist_id </if>
              <if test = 'interfaceType eq "provide".toString()'> provide_hist_id </if>
          ) L
          ON A.retry_id_seq  = L.retry_id_seq
          LEFT OUTER JOIN status_code B
          ON A.status_cd = B.status_cd
          LEFT OUTER JOIN guiweb.cm_user C
          ON A.started_by = C.user_id
          WHERE 1 = 1
      ) B
      ON
        <if test = 'interfaceType eq "collect".toString()'>
          A.collect_hist_id  = B.collect_hist_id
        </if>
        <if test = 'interfaceType eq "provide".toString()'>
          A.provide_hist_id  = B.provide_hist_id
        </if>
      LEFT OUTER JOIN 
      (SELECT status_cd, status_nm FROM status_code WHERE use_yn = 'Y' AND status_cd != '6000') C
      ON A.status_cd = C.status_cd
  </select>

  <!-- SSE for Retry -->
  <!-- -->

  <select id="getHistoryStatusTime" parameterType="map" resultType="string">
    SELECT
      DATE_FORMAT( DATE_ADD(IFNULL(Max(started_at), SYSDATE()), INTERVAL 1 MINUTE) , '%Y-%m-%d %H:%i:%s') last_started_at
    FROM
      <include refid="def_table_history" />

    <!--
    SELECT
      CASE
        WHEN COUNT(*) = 0 THEN
   			  DATE_FORMAT( DATE_ADD(SYSDATE(), INTERVAL 1 MINUTE) , '%Y-%m-%d %H:%i:%s')
   		  ELSE
      		DATE_FORMAT( DATE_ADD(IFNULL(event_time, SYSDATE()), INTERVAL 1 MINUTE) , '%Y-%m-%d %H:%i:%s')
      END last_started_at
    FROM
      <include refid="def_table_stat_status" />
    WHERE 1 = 1
    <if test = 'interfaceType eq "collect".toString()'>
      AND report_type = 'collect_hist'
    </if>
    <if test = 'interfaceType eq "provide".toString()'>
      AND report_type = 'provide_hist'
    </if>
    -->
  </select>

</mapper>