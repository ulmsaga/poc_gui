package com.mobigen.cdev.datagw.core.file.file.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.HashMap;
import java.util.Map;

import org.assertj.core.api.Assertions;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockHttpSession;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.mobigen.cdev.datagw.core.file.dto.ExcelDto;
import com.mobigen.cdev.datagw.core.file.excel.handler.ExcelDefaultExceptionHandler;
import com.mobigen.cdev.datagw.core.security.dto.ResultSmsAuthDto;
import com.mobigen.cdev.datagw.core.security.util.sha.SHAUtil;
import com.mobigen.cdev.datagw.module.common.repository.mybatis.CommonRepository;

@AutoConfigureMockMvc
@SpringBootTest
@Disabled
class FileManageControllerTest {

    private final MockMvc mockMvc;
    private final CommonRepository commonRepository;
    private MockHttpSession mockHttpSession;

    @Autowired
    FileManageControllerTest(MockMvc mockMvc, CommonRepository commonRepository) {
        this.mockMvc = mockMvc;
        this.commonRepository = commonRepository;
    }

    /* @BeforeEach
    void loginAuth() throws Throwable {
        String userId = "PTN1889130";
        String userPass = "33333";

        mockHttpSession = new MockHttpSession();
        mockMvc.perform(
                        MockMvcRequestBuilders.get("/login/loginAuth?userId=" + userId + "&userPwdEx=" + userPass).session(mockHttpSession))
                .andExpect(MockMvcResultMatchers.status().isOk());
    } */

    @BeforeEach
    @DisplayName("DataGW에서 사용 할 Login 인증 TEST")
    public void loginProcTest() throws Exception {
    	
    	// given
    	String userId = "PTN1889130";
    	String userPwdEx = "!ckdtprl10!";
    	String userPwd = userId + userPwdEx;
    	    	
    	userPwdEx = SHAUtil.sha512(userPwdEx);
    	userPwd = SHAUtil.sha512(userPwd);
    	
    	// when
    	mockHttpSession = new MockHttpSession();
    	
    	MvcResult result = 
			mockMvc.perform(
				// MockMvcRequestBuilders.get("/login/loginProc")
				MockMvcRequestBuilders.get("/login/loginAuth")
				.param("userId", userId)
				.param("userPwdEx", userPwdEx)
				.param("userPwd", userPwd)
				.session(mockHttpSession)
			)
			.andExpect(status().isOk())
			.andReturn();
    	
    	String content = result.getResponse().getContentAsString();
    	
		JSONObject jsonObject = new JSONObject(content);
		String rsResult = jsonObject.getString("result");
		    	
		String publicKey = "xd0f9sdjfe";
		String authType = "LOGIN";
		String refMenuCode = "LOGIN";
						
		Assertions.assertThat(rsResult).isEqualTo("1");
		
		result = 
			mockMvc.perform(
				MockMvcRequestBuilders.get("/login/sendSmsAuthenticationCode")
				.param("publicKey", publicKey)
				.param("authType", authType)
				.param("refMenuCode", refMenuCode)
				.session(mockHttpSession)
			)
			.andExpect(status().isOk())
			.andReturn();
		
		content = result.getResponse().getContentAsString();
		jsonObject = new JSONObject(content);
		
		JSONObject resultRs = jsonObject.getJSONObject("rs");
		String smsCode = resultRs.getString("smsCode");
		
		System.out.println("SMS Code : " + smsCode);
		
		result = 
				mockMvc.perform(
					MockMvcRequestBuilders.get("/login/verifyAuthenticationCode")
					.param("publicKey", publicKey)
					.param("smsCode", smsCode)
					.session(mockHttpSession)
				)
				.andExpect(status().isOk())
				.andReturn();
		
		content = result.getResponse().getContentAsString();
		jsonObject = new JSONObject(content);
		resultRs = jsonObject.getJSONObject("rs");
		
		
		// then
		Assertions.assertThat(resultRs.getString("authFlowStage")).isEqualTo(ResultSmsAuthDto.STAGE_AUTH_PASSED);
		
    }


    @SuppressWarnings("null")
    @Test
    @Disabled
    @DisplayName("Excel DownLoad Test // Excel Down 경로 Properties 수정 수 사용 할 것!!!")
    void makeExcelAndDownLoadTest() throws Exception {
        // given
        Map<String, Object> param = new HashMap<>();
        param.put("userId", "ALL");
        param.put("checkUserPassYn", "N");
        param.put("fileExt", "xlsx");
        param.put("fileName", "user_list");
        param.put("sheetName", "user_list");
        param.put("columnId", "user_id,user_name,email,update_time,update_user");
        param.put("titleName", "user_id,user_name,email,update_time,update_user");
        param.put("groupInfo", "0:2:사용자 정보,3:4:등록 정보");

        // when
        ExcelDto excelDto = new ExcelDto();
        ExcelDefaultExceptionHandler resultHandler = new ExcelDefaultExceptionHandler(param);
        commonRepository.getUserListExcel(param, resultHandler);
        excelDto.setFile_ext(param.get("fileExt").toString());
        excelDto.setFile_name(param.get("fileName").toString());
        excelDto.setTarget_file_path(resultHandler.execute());

        MultiValueMap<String, String> multiValueMap = new LinkedMultiValueMap<>();
        multiValueMap.add("targetFilePath", excelDto.getTarget_file_path());
        multiValueMap.add("fileName", excelDto.getFile_name());
        multiValueMap.add("fileExt", excelDto.getFile_ext());
        multiValueMap.add("protectFile", "N");

        MvcResult mvcResult = mockMvc.perform(
                MockMvcRequestBuilders.post("/common/filemanage/fileDownload")
                        .contentType(MediaType.APPLICATION_FORM_URLENCODED_VALUE)
                        .params(multiValueMap)
                        .session(mockHttpSession)
        ).andExpect(MockMvcResultMatchers.status().isOk()).andReturn();

        MockHttpServletResponse response = mvcResult.getResponse();
        String contentDisp = response.getHeader(HttpHeaders.CONTENT_DISPOSITION);

        // Then
        assert contentDisp != null;
        Assertions.assertThat(contentDisp.contains(param.get("fileName").toString()) && contentDisp.contains(excelDto.getFile_name())).isTrue();
    }

}