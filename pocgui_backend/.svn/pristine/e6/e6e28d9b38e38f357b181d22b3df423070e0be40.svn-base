package com.mobigen.cdev.datagw.module.manage.service;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mobigen.cdev.datagw.core.exception.RsRuntimeException;
import com.mobigen.cdev.datagw.core.file.dto.ExcelDto;
import com.mobigen.cdev.datagw.core.file.excel.handler.ExcelDefaultExceptionHandler;
import com.mobigen.cdev.datagw.module.manage.dto.NmsChargeManageDto;
import com.mobigen.cdev.datagw.module.manage.dto.NmsInfoManageDto;
import com.mobigen.cdev.datagw.module.manage.dto.UserInfoManageDto;
import com.mobigen.cdev.datagw.module.manage.repository.mybatis.ManageRepository;

@Service
public class ManageServiceImpl implements ManageService {

  private final ManageRepository manageRepository;

  public ManageServiceImpl(ManageRepository manageRepository) {
    this.manageRepository = manageRepository;
  }
  
  //
  @Override
  public List<UserInfoManageDto> getUserInfoList(Map<String, Object> param) {
    return manageRepository.getUserInfoList(param);
  }
  @Override
  public ExcelDto getUserInfoListExcel(Map<String, Object> param) {
    ExcelDto excelDto = new ExcelDto();

    try {
      ExcelDefaultExceptionHandler resultHandler = new ExcelDefaultExceptionHandler(param);
      manageRepository.getUserInfoListExcel(param, resultHandler);

      if("".equals(String.valueOf(param.get("sheetName")))) param.put("sheetName", "sheet1");
      if("".equals(String.valueOf(param.get("fileName")))) param.put("fileName", param.get("sheetName"));
      if("".equals(String.valueOf(param.get("fileExt")))) param.put("fileExt", "xlsx");

      excelDto.setFile_ext(String.valueOf(param.get("fileExt")));
      excelDto.setFile_name(String.valueOf(param.get("fileName")));
      excelDto.setTarget_path_key(ExcelDto.FILE_PATH_CREATE_EXCEL);
      excelDto.setTarget_file(resultHandler.execute());
    } catch (Exception e) {
      throw new RsRuntimeException("error.common.excel.file");
    }

    return excelDto;
  }

  //
  @Override
  public List<NmsInfoManageDto> getNmsInfoList(Map<String, Object> param) {
    return manageRepository.getNmsInfoList(param);
  }
  @Override
  public List<NmsInfoManageDto> getEditNmsInfo(Map<String, Object> param) {
    return manageRepository.getEditNmsInfo(param);
  }
  @Override
  public List<NmsInfoManageDto> getInsertNmsInfo(Map<String, Object> param) {
    return manageRepository.getInsertNmsInfo(param);
  }
  @Override
  public List<NmsInfoManageDto> getSelectNmsId(Map<String, Object> param) {
    return manageRepository.getSelectNmsId(param);
  }
  @Override
  public ExcelDto getNmsInfoListExcel(Map<String, Object> param) {
    ExcelDto excelDto = new ExcelDto();

    try {
      ExcelDefaultExceptionHandler resultHandler = new ExcelDefaultExceptionHandler(param);
      manageRepository.getNmsInfoListExcel(param, resultHandler);

      if("".equals(String.valueOf(param.get("sheetName")))) param.put("sheetName", "sheet1");
      if("".equals(String.valueOf(param.get("fileName")))) param.put("fileName", param.get("sheetName"));
      if("".equals(String.valueOf(param.get("fileExt")))) param.put("fileExt", "xlsx");

      excelDto.setFile_ext(String.valueOf(param.get("fileExt")));
      excelDto.setFile_name(String.valueOf(param.get("fileName")));
      excelDto.setTarget_path_key(ExcelDto.FILE_PATH_CREATE_EXCEL);
      excelDto.setTarget_file(resultHandler.execute());
    } catch (Exception e) {
      throw new RsRuntimeException("error.common.excel.file");
    }

    return excelDto;
  }

  //
  @Transactional
  @Override
  public int getUpdateNmsChargeManage(Map<String, Object> param) {
    try{
      int deleteList = manageRepository.getDeleteNmsChargeManage(param);
      int insertList = manageRepository.getInsertNmsChargeManage(param);

      int result = deleteList + insertList;

      return result;
    } catch (Exception e) {
      throw new RsRuntimeException("error.db.transaction");
    }
  }
  @Override
  public int getDeleteNmsChargeManage(Map<String, Object> param) {
    return manageRepository.getDeleteNmsChargeManage(param);
  }
  @Override
  public ExcelDto getNmsChargeManageListExcel(Map<String, Object> param) {
    ExcelDto excelDto = new ExcelDto();

    try {
      ExcelDefaultExceptionHandler resultHandler = new ExcelDefaultExceptionHandler(param);
      manageRepository.getNmsChargeManageListExcel(param, resultHandler);

      if("".equals(String.valueOf(param.get("sheetName")))) param.put("sheetName", "sheet1");
      if("".equals(String.valueOf(param.get("fileName")))) param.put("fileName", param.get("sheetName"));
      if("".equals(String.valueOf(param.get("fileExt")))) param.put("fileExt", "xlsx");

      excelDto.setFile_ext(String.valueOf(param.get("fileExt")));
      excelDto.setFile_name(String.valueOf(param.get("fileName")));
      excelDto.setTarget_path_key(ExcelDto.FILE_PATH_CREATE_EXCEL);
      excelDto.setTarget_file(resultHandler.execute());
    } catch (Exception e) {
      throw new RsRuntimeException("error.common.excel.file");
    }

    return excelDto;
  }
  @Override
  public List<NmsChargeManageDto> getManagerChangeStatus(Map<String, Object> param) {
    return manageRepository.getManagerChangeStatus(param);
  }
}
