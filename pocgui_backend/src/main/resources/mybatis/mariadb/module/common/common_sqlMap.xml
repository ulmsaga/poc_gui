<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mobigen.cdev.mapper.mariadb.module.common">

	<sql id="def_table_cm_user">cm_user</sql>
	<sql id="def_table_cm_menu">cm_menu</sql>

	<!-- Login User -->
	<select id="getUserList" parameterType="map" resultType="com.mobigen.cdev.poc.module.common.dto.user.UserInfoDto">
		<include refid="sqlUserList"/>
	</select>
	
	<select id="getUserListExcel" parameterType="map" resultType="java.util.HashMap">
		<include refid="sqlUserList"/>
	</select>

	<sql id="sqlUserList">
		SELECT
			USER_ID
		,	USER_NAME
		,	USER_PASS PASSWORD
		,	PHONE
		,	EMAIL
		,	INSA_TEAM_ID
		,	INSA_TEAM_NAME
		,	LAST_LOGIN_TIME
		,	UPDATE_TIME
		,	UPDATE_USER
		FROM
			<include refid="def_table_cm_user" />
		WHERE 1 = 1
		AND USE_YN = 'Y'
		<if test = 'userId != null and userId neq ""'>
			<if test = 'userId neq "ALL".toString()'>
				AND USER_ID = #{userId}
			</if>
		</if>
		<choose>
			<when test = 'checkUserPassYn eq "Y".toString()'>AND USER_PASS = #{userPwdEx}</when>
			<when test = 'checkUserPassYn eq "N".toString()'>AND 1 = 1</when>
			<otherwise>AND USER_PASS = #{userPwdEx}</otherwise>
		</choose>
		<choose>
			<when test = 'checkUserPassByPhoneLastNum eq "Y".toString()'>AND RIGHT(PHONE, 4) = #{userPwdEx}</when>
			<when test = 'checkUserPassByPhoneLastNum eq "N".toString()'>AND 1 = 1</when>
			<otherwise>AND 1 = 1</otherwise>
		</choose>
	</sql>
	
	<insert id="insertUserInfo" parameterType="java.util.List">
		<include refid = "sqlInsertUserInfo"/>
	</insert>
	
	<sql id = "sqlInsertUserInfo">
		INSERT INTO	<include refid="def_table_cm_user" />
		(
			USER_ID
		,	USER_NAME
		,	USER_PASS
		,	PHONE
		,	EMAIL
		,	INSA_TEAM_ID
		,	INSA_TEAM_NAME
		,	USE_YN
		, 	PASS_CHANGEDATE
		,	LAST_EDIT_TIME
		,	LAST_LOGIN_TIME
		,	UPDATE_TIME
		,	UPDATE_USER
		)
		VALUES
		<foreach item="item" index="index" collection="list" separator=",">
			(
				#{item.user_id}
			,	#{item.user_name}
			,	''
			,	#{item.phone}
			,	#{item.email}
			,	#{item.insa_team_id}
			,	#{item.insa_team_name}
			,	#{item.use_yn}
			,	#{item.pass_changedate}
			,	#{item.last_edit_time}
			,	#{item.last_login_time}
			,	#{item.update_time}
			,	#{item.update_user}
			)
		</foreach>
		ON DUPLICATE KEY UPDATE
			PHONE = values(phone)
		,	EMAIL = values(email)
		,	INSA_TEAM_ID = values(insa_team_id)
		,	INSA_TEAM_NAME = values(insa_team_name)
		,	PASS_CHANGEDATE = values(pass_changedate)
		,	LAST_EDIT_TIME = values(last_edit_time)
		,	LAST_LOGIN_TIME = values(last_login_time)
		,	UPDATE_TIME = values(update_time)
		,	UPDATE_USER = values(update_user)
	</sql>
	
	<select id="getDefaultMenuInfo" parameterType="map" resultType="com.mobigen.cdev.poc.module.common.dto.menu.MenuInfoDto">
		<!--
		<include refid="sqlRecursiveMenuInfo"/>
		<include refid="sqlMenuInfoMain"/>
		<include refid="sqlMenuInfoDefaultUseMenuCond"/>
		-->
		SELECT
			A.*
		FROM
		(
			<include refid="sqlMenuInfoWithAuth" />
		) A
		WHERE A.default_menu_yn = 'Y'
	</select>

	<select id="getUserMenuInfoList" parameterType="map" resultType="com.mobigen.cdev.poc.module.common.dto.menu.MenuInfoDto">
		<!--
		<include refid="sqlRecursiveMenuInfo"/>
		<include refid="sqlMenuInfoMain"/>
		<include refid="sqlMenuInfoUserMenuCond"/>
		-->
		<include refid="sqlMenuInfoWithAuth" />
		ORDER BY menu_pcode, menu_code
	</select>

	<select id="getMenuInfoList" parameterType="map" resultType="com.mobigen.cdev.poc.module.common.dto.menu.MenuInfoDto">
		<!--
		<include refid="sqlRecursiveMenuInfo"/>
		<include refid="sqlMenuInfoMain"/>
		<include refid="sqlMenuInfoAllMenuCode"/>
		-->
		<include refid="sqlMenuInfoWithAuth" />
	</select>

	<sql id="sqlRecursiveMenuInfo">
		WITH RECURSIVE CTE  AS (
			SELECT
				VERSION
			,	MENU_PCODE
			,	MENU_CODE
			,	MENU_ORDER
			,	MENU_TYPE
			,	MENU_NAME
			,	CASE IFNULL(MENU_NAVIGATION, '') WHEN '' THEN MENU_NAME ELSE MENU_NAVIGATION END AS MENU_NAVIGATION
			,	MENU_LOCATION
			,	END_FLAG
			,	USE_YN
			,	ADMIN_ALLOW_LV
			,	REG_ADMIN_ALLOW_LV
			,	MODULE_TYPE
			,	MODULE_ALLOW_LV
			,	REG_MODULE_ALLOW_LV
			,	DEFAULT_MENU_YN
			,	UPDATE_TIME
			,	UPDATE_USER
			FROM <include refid="def_table_cm_menu" />
			WHERE VERSION = '1'
			AND MENU_PCODE = '00000000'
			UNION ALL
			SELECT
				C.VERSION 
			,	C.MENU_PCODE
			,	C.MENU_CODE
			,	C.MENU_ORDER
			,	C.MENU_TYPE
			,	C.MENU_NAME
			,	CONCAT(CTE.MENU_NAVIGATION, " &gt; ", C.MENU_NAVIGATION)
			,	C.MENU_LOCATION
			,	C.END_FLAG
			,	C.USE_YN
			,	C.ADMIN_ALLOW_LV
			,	C.REG_ADMIN_ALLOW_LV
			,	C.MODULE_TYPE
			,	C.MODULE_ALLOW_LV
			,	C.REG_MODULE_ALLOW_LV
			,	C.DEFAULT_MENU_YN
			,	C.UPDATE_TIME
			,	C.UPDATE_USER
			FROM <include refid="def_table_cm_menu" /> C
			INNER JOIN CTE
				ON CTE.VERSION = C.VERSION 
				AND CTE.MENU_CODE = C.MENU_PCODE
		)
	</sql>
	<sql id="sqlMenuInfoMain">
		SELECT 
			MENU_PCODE
		,	MENU_CODE
		,	LEAD(MENU_CODE) OVER (ORDER BY MENU_CODE, MENU_ORDER) MENU_CODE_NEXT
		,	LEAD(MENU_PCODE) OVER (ORDER BY MENU_CODE, MENU_ORDER) MENU_PCODE_NEXT
		,	LAG(MENU_CODE) OVER (ORDER BY MENU_CODE, MENU_ORDER) MENU_CODE_PREV
		,	LAG(MENU_PCODE) OVER (ORDER BY MENU_CODE, MENU_ORDER) MENU_PCODE_PREV
		,	MENU_ORDER
		,	MENU_TYPE
		,	MENU_NAME
		,	MENU_NAVIGATION
		,	MENU_LOCATION
		,	END_FLAG
		,	USE_YN
		,	ADMIN_ALLOW_LV
		,	REG_ADMIN_ALLOW_LV
		,	MODULE_TYPE
		,	MODULE_ALLOW_LV
		,	REG_MODULE_ALLOW_LV
		,	DEFAULT_MENU_YN
		,	UPDATE_TIME
		,	UPDATE_USER
		FROM CTE
	</sql>
	<sql id="sqlMenuInfoUserMenuCond">
		<include refid="sqlMenuInfoAllMenuCode"/>
		<include refid="sqlMenuInfoUserAndAuthCond"/>
		ORDER BY MENU_CODE, MENU_ORDER
	</sql>
	<sql id="sqlMenuInfoDefaultUseMenuCond">
		<include refid="sqlMenuInfoAllMenuCode"/>
		AND END_FLAG = '1'
		AND DEFAULT_MENU_YN = 'Y'
		<include refid="sqlMenuInfoUserAndAuthCond"/>
		ORDER BY MENU_CODE, MENU_ORDER
	</sql>
	<sql id="sqlMenuInfoAllMenuCode">
		WHERE 1 = 1
		AND USE_YN = 'Y'
	</sql>
	<sql id="sqlMenuInfoUserAndAuthCond">
		AND ADMIN_ALLOW_LV &gt;= (SELECT ADMIN_LV FROM <include refid="def_table_cm_user" /> WHERE USER_ID = #{userId})
		AND MODULE_ALLOW_LV &gt;= (
				SELECT
					CASE CTE.MODULE_TYPE
						WHEN 'HIS' THEN MODULE_HIS_LV
						WHEN 'DAT' THEN MODULE_DAT_LV
						WHEN 'SET' THEN MODULE_SET_LV
						WHEN 'COLLECT' THEN MODULE_COLLECT_LV
						WHEN 'PROVIDE' THEN MODULE_PROVIDE_LV
						WHEN 'MANAGE' THEN MODULE_MANAGE_LV
					ELSE 5 END
				FROM <include refid="def_table_cm_user" />
				WHERE  USER_ID = #{userId}
			)
	</sql>

	<sql id="sqlMenuInfoWithAuth">
		select
			menu_pcode, menu_code
		,	lead(menu_code) over (order by menu_code, menu_order) menu_code_next
		,	lead(menu_pcode) over (order by menu_code, menu_order) menu_pcode_next
		,	lag(menu_code) over (order by menu_code, menu_order) menu_code_prev
		,	lag(menu_pcode) over (order by menu_code, menu_order) menu_pcode_prev
		, 	menu_order, menu_name, menu_navigation, menu_location
		,	A.use_yn
		,	A.end_flag
		,	A.default_menu_yn
		,	A.module_id, module_name, module_desc
		,	role_id
		,	role_name
		,	role_desc
		,	case when allow_use_lv >= target_use_lv then '1' else '0' end allow_use_auth
		,	case when allow_read_lv >= target_read_lv then '1' else '0' end allow_read_auth
		,	case when allow_create_lv >= target_create_lv then '1' else '0' end allow_create_auth
		,	case when allow_modify_lv >= target_modify_lv then '1' else '0' end allow_modify_auth
		,	case when allow_delete_lv >= target_delete_lv then '1' else '0' end allow_delete_auth
		,	case when allow_confirm_lv >= target_confirm_lv then '1' else '0' end allow_confirm_auth
		,	case when allow_func01_lv >= target_func01_lv then '1' else '0' end allow_func01_auth
		,	case when allow_func02_lv >= target_func02_lv then '1' else '0' end allow_func02_auth
		,	case when allow_func03_lv >= target_func03_lv then '1' else '0' end allow_func03_auth
		,	case when allow_func04_lv >= target_func04_lv then '1' else '0' end allow_func04_auth
		,	case when allow_func05_lv >= target_func05_lv then '1' else '0' end allow_func05_auth
		,	case when allow_func06_lv >= target_func06_lv then '1' else '0' end allow_func06_auth
		,	case when allow_func07_lv >= target_func07_lv then '1' else '0' end allow_func07_auth
		,	case when allow_func08_lv >= target_func08_lv then '1' else '0' end allow_func08_auth
		,	case when allow_func09_lv >= target_func09_lv then '1' else '0' end allow_func09_auth
		,	case when allow_func10_lv >= target_func10_lv then '1' else '0' end allow_func10_auth
		,	update_user
		,	update_time
		from
		(
			select
				A.menu_pcode
			,	A.menu_code
			,	A.menu_order
			,	A.menu_name
			,	A.menu_navigation
			,	A.menu_location
			,	A.use_yn
			,	A.end_flag
			,	A.default_menu_yn
			,	B.module_id
			,	B.module_name
			,	B.module_desc
			,	B.allow_use_lv
			,	B.allow_read_lv
			,	B.allow_create_lv
			,	B.allow_modify_lv
			,	B.allow_delete_lv
			,	B.allow_confirm_lv
			,	B.allow_func01_lv
			,	B.allow_func02_lv
			,	B.allow_func03_lv
			,	B.allow_func04_lv
			,	B.allow_func05_lv
			,	B.allow_func06_lv
			,	B.allow_func07_lv
			,	B.allow_func08_lv
			,	B.allow_func09_lv
			,	B.allow_func10_lv
			,	A.update_user
			,	A.update_time
			from
				cm_menu A
				left outer join
				(
					select
					A.module_id
					,	A.module_name
					,	A.module_desc
					,	B.menu_code
					,	ifnull(B.allow_use_lv, 5) allow_use_lv
					,	ifnull(B.allow_read_lv, 5) allow_read_lv
					,	ifnull(B.allow_create_lv, 5) allow_create_lv
					,	ifnull(B.allow_modify_lv, 5) allow_modify_lv
					,	ifnull(B.allow_delete_lv, 5) allow_delete_lv
					,	ifnull(B.allow_confirm_lv, 5) allow_confirm_lv
					,	ifnull(B.allow_func01_lv, 5) allow_func01_lv
					,	ifnull(B.allow_func02_lv, 5) allow_func02_lv
					,	ifnull(B.allow_func03_lv, 5) allow_func03_lv
					,	ifnull(B.allow_func04_lv, 5) allow_func04_lv
					,	ifnull(B.allow_func05_lv, 5) allow_func05_lv
					,	ifnull(B.allow_func06_lv, 5) allow_func06_lv
					,	ifnull(B.allow_func07_lv, 5) allow_func07_lv
					,	ifnull(B.allow_func08_lv, 5) allow_func08_lv
					,	ifnull(B.allow_func09_lv, 5) allow_func09_lv
					,	ifnull(B.allow_func10_lv, 5) allow_func10_lv
					from
						cm_module A
						left outer join
						cm_menu_module B
						on A.module_id = B.module_id
				) B
				on A.menu_code = B.menu_code
			where A.use_yn = 'Y'
		) A
		left outer join
		(
			select
				A.user_id, A.user_name
			,	A.phone, A.email
			,	A.role_id, A.role_name, A.role_desc
			,	B.module_id
			,	min(nvl(target_use_lv, 5)) target_use_lv
			,	min(nvl(target_read_lv, 5)) target_read_lv
			,	min(nvl(target_create_lv, 5)) target_create_lv
			,	min(nvl(target_modify_lv, 5)) target_modify_lv
			,	min(nvl(target_delete_lv, 5)) target_delete_lv
			,	min(nvl(target_confirm_lv, 5)) target_confirm_lv
			,	min(nvl(target_func01_lv, 5)) target_func01_lv
			,	min(nvl(target_func02_lv, 5)) target_func02_lv
			,	min(nvl(target_func03_lv, 5)) target_func03_lv
			,	min(nvl(target_func04_lv, 5)) target_func04_lv
			,	min(nvl(target_func05_lv, 5)) target_func05_lv
			,	min(nvl(target_func06_lv, 5)) target_func06_lv
			,	min(nvl(target_func07_lv, 5)) target_func07_lv
			,	min(nvl(target_func08_lv, 5)) target_func08_lv
			,	min(nvl(target_func09_lv, 5)) target_func09_lv
			,	min(nvl(target_func10_lv, 5)) target_func10_lv
			from
			(
				select
					A.user_id, A.user_name
				,	A.phone, A.email
				,	B.role_id, B.role_name, B.role_desc
				from
					cm_user A
					left outer join
					(
						select
							A.role_id
						,	A.role_name
						,	A.role_desc
						,	B.user_Id
						from
							cm_role A
							left outer join
							cm_user_role B
							on A.role_id = B.role_id
					) B
					on A.user_id  = B.user_id
					where 1 = 1
					and a.use_yn = 'Y'
					and a.user_id = #{userId}
				) A
				left outer join
				cm_role_module B
				on A.role_id = B.role_id
				where 1 = 1
				group by module_id, user_id, user_name, phone, email
			) B
		on A.module_id = B.module_id
		where 1 = 1
	</sql>
</mapper>