<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mobigen.cdev.mapper.mysql.module.nw.analysis">
    <sql id="pm_epc_kpi"><include refid="com.mobigen.cdev.mapper.mysql.tabledef.pm_epc_kpi" /></sql>
    <sql id="pm_epc_root_cause"><include refid="com.mobigen.cdev.mapper.mysql.tabledef.pm_epc_root_cause" /></sql>
    <sql id="cu_cause_fail_type"><include refid="com.mobigen.cdev.mapper.mysql.tabledef.cu_cause_fail_type" /></sql>

    <select id="getKpiAnalysisRootCause" parameterType="map" resultType="com.mobigen.cdev.poc.module.nw.dto.RootCauseForPivotDto">
        SELECT
            CAUSE
        ,	CASE WHEN IFNULL(DESCRIPTION, '0') = '0' THEN CAUSE ELSE DESCRIPTION END DESCRIPTION
        FROM
        (
            SELECT
                A.FAIL_TYPE
            ,	CONCAT(A.FAIL_TYPE, '_', A.CAUSE) CAUSE
            ,	CONCAT(IFNULL(B.DESCRIPTION, '-'), '|'
                , 	CASE
                        WHEN IFNULL(CAUSE_TYPE, '') = 'EMM' THEN 'EMM_'
                        WHEN IFNULL(CAUSE_TYPE, '') = 'ESM' THEN 'ESM_' ELSE ''
                    END
                ,	CASE
                        WHEN A.DESCRIPTION =  '0' THEN  A.CAUSE
                        ELSE  REPLACE(REPLACE(A.DESCRIPTION, 'EMM_', ''), 'ESM_', '')
                    END
                ) DESCRIPTION
            ,	CAUSE_CNT
            FROM
                <include refid="sqlDefCauseTable" /> A
                LEFT OUTER JOIN
                CU_CAUSE_FAIL_TYPE B
                ON A.FAIL_TYPE = B.FAIL_TYPE
            WHERE 1 = 1
            <include refid="sqlKpiAnalysisEventTimeCond" />
            <include refid="sqlKpiAnalysisMainCond" />
            <include refid="sqlKpiAnalysisCallTypeCond" />
            AND A.CAUSE_CNT > 0
        ) A
        GROUP BY
        FAIL_TYPE, CAUSE, DESCRIPTION
        ORDER BY
        FAIL_TYPE, SUM(CAUSE_CNT) DESC
    </select>

    <select id="getKpiAnalysis" parameterType="map" resultType="java.util.HashMap">
        <include refid="sqlKpiAnalysis" />
    </select>

    <select id="getKpiAnalysisExcel" parameterType="map" resultType="java.util.HashMap">
        <include refid="sqlKpiAnalysis" />
    </select>

    <sql id="sqlKpiAnalysis">
        SELECT
                DATE_FORMAT(EVENT_TIME, '%Y%m%d%H%i%s') EVENT_TIME
            ,	DATE_FORMAT(EVENT_TIME, '%Y-%m-%d %H:%i:%s') EVENT_EXP_TIME
            , 	NODE1_TYPE, NODE1_ID, NODE1_NAME, NODE1_EXP_ID
            ,	NODE2_TYPE, NODE2_ID, NODE2_NAME, NODE2_EXP_ID
            ,   CALL_TYPE
                <include refid="sqlKpiAnalysisCaclulatedSumKpiColumns" />
            <if test="pivotCauseList.size > 0">
            ,   <foreach item="item" index="index" collection="pivotCauseList" open="" separator="," close="">
                    SUM(CASE WHEN CAUSE = #{item} THEN CAUSE_CNT ELSE 0 END) ${item}
                </foreach>
            </if>
        FROM
        (
            SELECT
                A.EVENT_TIME
                <include refid="sqlKpiAnalysisEquipColumns" />
            ,	A.CALL_TYPE
            ,	A.ATTEMPT_CNT
            ,   A.SUCCESS_CNT
            ,   A.DROP_CNT
            ,	A.DATA_ATTEMPT_CNT
            ,   A.DATA_SUCESS_CNT DATA_SUCCESS_CNT
            ,	A.IMS_ATTEMPT_CNT
            ,   A.IMS_SUCESS_CNT IMS_SUCCESS_CNT
            ,	A.DETACH_CNT
            ,	B.CAUSE_TYPE
            ,	CONCAT(B.FAIL_TYPE, '_', B.CAUSE) CAUSE
            ,	B.CAUSE_CNT
            FROM
                <include refid="sqlKpiAnalysisTableJoin" />
            WHERE 1 = 1
            <include refid="sqlKpiAnalysisEventTimeCond" />
            <include refid="sqlKpiAnalysisMainCond" />
            <include refid="sqlKpiAnalysisCallTypeCond" />
        ) A
        GROUP BY EVENT_TIME, NODE1_TYPE, NODE1_ID, NODE2_TYPE, NODE2_ID, CALL_TYPE
        ORDER BY EVENT_TIME, NODE1_TYPE, NODE1_ID, NODE2_TYPE, NODE2_ID, CALL_TYPE
    </sql>

    <sql id="sqlKpiAnalysisEquipColumns">
        <if test='graphType eq "NODE".toString()'>
            <choose>
                <when test='node1Type eq "ENB"'>
                    ,	'ENB' NODE1_TYPE
                    ,	A.ENB_ID NODE1_ID
                    ,	A.BTS_NAME NODE1_NAME
                    ,	CONCAT(A.BTS_NAME, ' (', A.ENB_ID, ')') NODE1_EXP_ID
                </when>
                <otherwise>
                    <!-- EPC -->
                    ,	A.NODE_TYPE NODE1_TYPE
                    ,	A.NODE_ID NODE1_ID
                    ,	CONCAT(A.NODE_TYPE, '_', A.NODE_ID) NODE1_NAME
                    ,	CASE WHEN NVL(A.NODE_ID, '0') = '0' THEN '-' ELSE CONCAT(A.NODE_TYPE, '#', LPAD(A.NODE_ID * 1, 2, '0')) END NODE1_EXP_ID
                </otherwise>
            </choose>
            ,	'-' NODE2_TYPE
            ,	'-' NODE2_ID
            ,	'-' NODE2_NAME
            ,	'-' NODE2_EXP_ID
        </if>
        <if test='graphType eq "LINK".toString()'>
            <choose>
                <when test='node1Type eq "ENB"'>
                    <!-- NODE1 ENB -->
                    ,	'ENB' NODE1_TYPE
                    ,	A.ENB_ID NODE1_ID
                    ,	A.BTS_NAME NODE1_NAME
                    ,	CONCAT(A.BTS_NAME, ' (', A.ENB_ID, ')') NODE1_EXP_ID
                    <!-- NODE2 MME -->
                    ,	A.NODE_TYPE NODE2_TYPE
                    ,	A.NODE_ID NODE2_ID
                    ,	CONCAT(A.NODE_TYPE, '_', A.NODE_ID) NODE2_NAME
                    ,	CASE WHEN NVL(A.NODE_ID, '0') = '0' THEN '-' ELSE CONCAT(A.NODE_TYPE, '#', LPAD(A.NODE_ID * 1, 2, '0')) END NODE2_EXP_ID
                </when>
                <otherwise>
                    <!-- NODE1 -->
                    ,	A.NODE1_TYPE NODE1_TYPE
                    ,	A.NODE1_ID NODE1_ID
                    ,	CONCAT(A.NODE1_TYPE, '_', A.NODE1_ID) NODE1_NAME
                    ,	CASE WHEN NVL(A.NODE1_ID, '0') = '0' THEN '-' ELSE CONCAT(A.NODE1_TYPE, '#', LPAD(A.NODE1_ID * 1, 2, '0')) END NODE1_EXP_ID
                    <!-- NODE2 -->
                    ,	A.NODE2_TYPE NODE2_TYPE
                    ,	A.NODE2_ID NODE2_ID
                    ,	CONCAT(A.NODE2_TYPE, '_', A.NODE2_ID) NODE2_NAME
                    ,	CASE WHEN NVL(A.NODE2_ID, '0') = '0' THEN '-' ELSE CONCAT(A.NODE2_TYPE, '#', LPAD(A.NODE2_ID * 1, 2, '0')) END NODE2_EXP_ID
                </otherwise>
            </choose>
        </if>

    </sql>

    <sql id="sqlKpiAnalysisCaclulatedSumKpiColumns">
        ,	IFNULL(SUM(ATTEMPT_CNT), 0) ATTEMPT_CNT
        ,	IFNULL(SUM(SUCCESS_CNT), 0) SUCCESS_CNT
        ,	CASE IFNULL(SUM(ATTEMPT_CNT), 0) WHEN 0 THEN '0' ELSE ROUND((SUM(SUCCESS_CNT) / SUM(ATTEMPT_CNT)) * 100, 2) END SUCCESS_RATE
        ,	IFNULL(DROP_CNT, 0) DROP_CNT
        ,	CASE WHEN SUM(DATA_SUCCESS_CNT) + SUM(IMS_SUCCESS_CNT) != 0 AND SUM(DROP_CNT) != 0 THEN ROUND(((SUM(DROP_CNT) / (SUM(DATA_SUCCESS_CNT) + SUM(IMS_SUCCESS_CNT))) * 100), 2) ELSE 0 END DROP_RATE
        , 	IFNULL(SUM(DATA_ATTEMPT_CNT), 0) DATA_ATTEMPT_CNT
        , 	IFNULL(SUM(DATA_SUCCESS_CNT), 0) DATA_SUCCESS_CNT
        , 	CASE WHEN SUM(DATA_ATTEMPT_CNT) != 0 AND SUM(DATA_SUCCESS_CNT) != 0 THEN ROUND(((SUM(DATA_SUCCESS_CNT) / SUM(DATA_ATTEMPT_CNT)) * 100), 2) ELSE 0 END DATA_SUCCESS_RATE
        ,	IFNULL(SUM(IMS_ATTEMPT_CNT), 0) IMS_ATTEMPT_CNT
        ,	IFNULL(SUM(IMS_SUCCESS_CNT), 0) IMS_SUCCESS_CNT
        , 	CASE WHEN SUM(IMS_ATTEMPT_CNT) != 0 AND SUM(IMS_SUCCESS_CNT) != 0 THEN ROUND(((SUM(IMS_SUCCESS_CNT) / SUM(IMS_ATTEMPT_CNT)) * 100), 2) ELSE 0 END IMS_SUCCESS_RATE
        <if test="addDetachCnt=='OK'">
        ,	IFNULL(SUM(DETACH_CNT), 0) DETACH_CNT
        </if>
    </sql>

    <sql id="sqlKpiAnalysisTableJoin">
        <if test='graphType eq "NODE".toString()'>
            <choose>
                <when test='node1Type eq "ENB"'>
                    PM_ENB_KPI_1M A LEFT OUTER JOIN
                    PM_ENB_ROOT_CAUSE_1M B
                    ON A.EVENT_TIME = B.EVENT_TIME
                    AND A.ENB_ID = B.ENB_ID
                    AND A.CALL_TYPE = B.CALL_TYPE
                </when>
                <otherwise>
                    PM_EPC_KPI_1M A LEFT OUTER JOIN
                    PM_EPC_ROOT_CAUSE_1M B
                    ON A.EVENT_TIME = B.EVENT_TIME
                    AND A.NODE_TYPE = B.NODE_TYPE
                    AND A.NODE_ID  = B.NODE_ID
                    AND A.CALL_TYPE = B.CALL_TYPE
                    AND A.MCC = B.MCC
                    AND A.MNC = B.MNC
                </otherwise>
            </choose>
        </if>
        <if test='graphType eq "LINK".toString()'>
            <choose>
                <when test='node1Type eq "ENB"'>
                    PM_LINK_ENB_KPI_1M A LEFT OUTER JOIN
                    PM_LINK_ENB_ROOT_CAUSE_1M B
                    ON A.EVENT_TIME = B.EVENT_TIME
                    AND A.ENB_ID = B.ENB_ID
                    AND A.NODE_TYPE = B.NODE_TYPE
                    AND A.NODE_ID  = B.NODE_ID
                    AND A.CALL_TYPE = B.CALL_TYPE
                </when>
                <otherwise>
                    PM_LINK_EPC_KPI_1M A LEFT OUTER JOIN
                    PM_LINK_EPC_ROOT_CAUSE_1M B
                    ON A.EVENT_TIME = B.EVENT_TIME
                    AND A.NODE1_TYPE = B.NODE1_TYPE
                    AND A.NODE1_ID  = B.NODE1_ID
                    AND A.NODE2_TYPE = B.NODE2_TYPE
                    AND A.NODE2_ID  = B.NODE2_ID
                    AND A.CALL_TYPE = B.CALL_TYPE
                </otherwise>
            </choose>
        </if>
    </sql>

    <sql id="sqlKpiAnalysisEventTimeCond">
        <choose>
            <when test = 'diffOneMin == true'>
                AND A.EVENT_TIME = DATE_FORMAT(#{startTime}, '%Y%m%d%H%i%s')
            </when>
            <otherwise>
                AND A.EVENT_TIME &gt;= DATE_FORMAT(#{startTime}, '%Y%m%d%H%i%s')
                AND A.EVENT_TIME &lt;  DATE_FORMAT(#{endTime}, '%Y%m%d%H%i%s')
            </otherwise>
        </choose>
    </sql>
    <sql id="sqlKpiAnalysisMainCond">
        <if test='graphType eq "NODE".toString()'>
            <choose>
                <when test='node1Type eq "ENB"'>
                    <!-- NODE-ENB -->
                    <if test='node1List.size > 0'>
                        <choose>
                            <when test="node1List.size == 1">
                                AND A.ENB_ID = #{node1List[0]}
                            </when>
                            <otherwise>
                                AND A.ENB_ID IN <foreach collection="node1List" index="index" item="item" open="(" separator="," close=")" >#{item}</foreach>
                            </otherwise>
                        </choose>
                    </if>
                </when>
                <otherwise>
                    <!-- NODE-EPC -->
                    AND A.NODE_TYPE = #{node1Type}
                    <if test='node1List.size > 0'>
                        <choose>
                            <when test="node1List.size == 1">
                                AND A.NODE_ID = #{node1List[0]}
                            </when>
                            <otherwise>
                                AND A.NODE_ID IN <foreach collection="node1List" index="index" item="item" open="(" separator="," close=")" >#{item}</foreach>
                            </otherwise>
                        </choose>
                    </if>
                    AND A.MCC = 'ALL'
                    AND A.MNC = 'ALL'
                </otherwise>
            </choose>
        </if>
        <if test='graphType eq "LINK".toString()'>
            <choose>
                <when test='node1Type eq "ENB"'>
                    <!-- LINK-ENB -->
                    <if test='node1List.size > 0'>
                        <choose>
                            <when test="node1List.size == 1">
                                AND A.ENB_ID = #{node1List[0]}
                            </when>
                            <otherwise>
                                AND A.ENB_ID IN <foreach collection="node1List" index="index" item="item" open="(" separator="," close=")" >#{item}</foreach>
                            </otherwise>
                        </choose>
                    </if>
                    <if test='node2Type neq "-".toString()'>
                        AND A.NODE_TYPE = #{node2Type}
                        <if test='node2List.size > 0'>
                            <choose>
                                <when test="node2List.size == 1">
                                    AND A.NODE_ID = #{node2List[0]}
                                </when>
                                <otherwise>
                                    AND A.NODE_ID IN <foreach collection="node2List" index="index" item="item" open="(" separator="," close=")" >#{item}</foreach>
                                </otherwise>
                            </choose>
                        </if>
                    </if>
                </when>
                <otherwise>
                    <!-- LINK-EPC -->
                    AND A.NODE1_TYPE = #{node1Type}
                    <if test='node1List.size > 0'>
                        <choose>
                            <when test="node1List.size == 1">
                                AND A.NODE1_ID = #{node1List[0]}
                            </when>
                            <otherwise>
                                AND A.NODE1_ID IN <foreach collection="node1List" index="index" item="item" open="(" separator="," close=")" >#{item}</foreach>
                            </otherwise>
                        </choose>
                    </if>
                    <if test='node2Type neq "-".toString()'>
                        AND A.NODE2_TYPE = #{node2Type}
                        <if test='node2List.size > 0'>
                            <choose>
                                <when test="node2List.size == 1">
                                    AND A.NODE2_ID = #{node2List[0]}
                                </when>
                                <otherwise>
                                    AND A.NODE2_ID IN <foreach collection="node2List" index="index" item="item" open="(" separator="," close=")" >#{item}</foreach>
                                </otherwise>
                            </choose>
                        </if>
                    </if>
                </otherwise>
            </choose>
        </if>
    </sql>
    <sql id="sqlKpiAnalysisCallTypeCond">
        <choose>
            <when test="callTypeList.size == 1">
                AND A.CALL_TYPE = #{callTypeList[0]}
            </when>
            <otherwise>
                AND A.CALL_TYPE IN <foreach collection="callTypeList" index="index" item="item" open="(" separator="," close=")" >#{item}</foreach>
            </otherwise>
        </choose>
    </sql>

    <!-- -->
    <select id="getKpiAnalysisEquipCauseCnt" resultType ="com.mobigen.cdev.poc.module.nw.dto.EquipCaseCauseDto" parameterType="map">
        <!-- MariaDB(local) 에서는 GROUPING이 안되 COALESCE 로 대체 -->
        <!-- MySQL(prod) 에서는 GROUPING 사용 가는 하나 추후 정리 -->
        SELECT
            *
        FROM
            (
                <include refid="sqlKpiAnalysisEquipCauseCnt" />
            ) A
        ORDER BY CASE WHEN STD_VALUE = '합계' THEN '0' ELSE STD_VALUE END
    </select>

    <sql id="sqlKpiAnalysisEquipCauseCnt">
        SELECT
            <include refid="com.mobigen.cdev.mapper.mysql.module.nw.analysis.sqlEquipCauseCntColumnsMariDB"/>
        FROM
        (
            SELECT
                <choose>
                    <when test = 'targetNodeType eq "IMSI".toString()'>
                        IFNULL(IMSI, 'NULL') IMSI
                    </when>
                    <when test = 'targetNodeType eq "UEM".toString()'>
                        <!-- DECODE(IFNULL(IWF_ID, '-'), '-', 'NULL', NVL(MODEL_NAME, '-')) IWF_ID -->
                        CASE
                            WHEN
                                IFNULL(IWF_ID, '-') = '-' THEN 'NULL'
                            ELSE
                                IFNULL(MODEL_NAME, '-')
                        END IWF_ID
                    </when>
                    <when test = 'targetNodeType eq "VLAN".toString()'>
                        <!-- DECODE(IFNULL(VLAN_ID, '0_0000'), '0_0000', 'NULL', IFNULL(VLAN_ID, '-')) VLAN_ID -->
                        CASE
                            WHEN
                                IFNULL(VLAN_ID, '-') = '-' THEN 'NULL'
                            ELSE
                                VLAN_ID
                        END VLAN_ID
                    </when>
                    <when test = 'targetNodeType eq "ENB".toString()'>
                        IFNULL(BTS_NAME, 'NULL') BTS_NAME
                    </when>
                    <otherwise>
                        CASE
                            WHEN
                                IFNULL(${targetNodeType}_ID, 'NULL') = '0000' THEN 'NULL'
                            ELSE
                                CASE
                                    WHEN
                                        IFNULL(${targetNodeType}_ID, 'NULL') REGEXP('^[0-9]+$') = 0 THEN 'NULL'
                                    ELSE
                                        CONCAT(#{targetNodeType}, '#', LPAD(${targetNodeType}_ID * 1, LENGTH(${targetNodeType}_ID * 1), '0'))
                            END
                        END ${targetNodeType}_ID
                    </otherwise>
                </choose>
                ,	CAUSE_CNT
            FROM
                PM_PATH_ROOT_CAUSE_1M
                <if test="targetNodeType=='UEM'"> A
                    LEFT OUTER JOIN  CM_UEMODEL B
                    ON A.IWF_ID = B.MODEL_CODE
                    AND A.IWF_ID = B.MODEL_CODE
                </if>
            WHERE 1 = 1
            AND CAUSE = #{selectedVal}
            AND FAIL_TYPE = #{failType}
            AND EVENT_TIME = DATE_FORMAT(#{startTime}, '%Y%m%d%H%i%s')
            AND CALL_TYPE = #{callType}
            <!-- MCC MNC -->
            AND MCC = 'ALL'
            AND MNC = 'ALL'
            <!-- MCC / MNC -->
            AND ${node1Type}_ID = #{node1Id}
            <if test='graphType=="LINK"'>
                AND ${node2Type}_ID = #{node2Id}
            </if>
        ) A
        <include refid="com.mobigen.cdev.mapper.mysql.module.nw.analysis.sqlEquipCauseGroupbyRollupMariDB"/>
    </sql>

    <sql id="sqlEquipCauseCntColumnsMariDB">
        <choose>
            <when test="targetNodeType == 'ENB'">
                    COALESCE (BTS_NAME, '합계') STD_NAME
                ,   BTS_NAME STD_VALUE
                ,	IFNULL(SUM(CAUSE_CNT),0) CAUSE_CNT
            </when>
            <when test="targetNodeType == 'IMSI'">
                    COALESCE (IMSI, '합계') STD_NAME
                ,   IMSI STD_VALUE
                ,	IFNULL(SUM(CAUSE_CNT),0) CAUSE_CNT
            </when>
            <when test="targetNodeType == 'UEM'">
                    COALESCE (IWF_ID, '합계') STD_NAME
                ,   IWF_ID STD_VALUE
                ,	IFNULL(SUM(CAUSE_CNT),0) CAUSE_CNT
            </when>
            <otherwise>
                    COALESCE (${targetNodeType}_ID, '합계') STD_NAME
                ,   ${targetNodeType}_ID STD_VALUE
                ,	IFNULL(SUM(CAUSE_CNT),0) CAUSE_CNT
            </otherwise>
        </choose>
    </sql>
    <sql id="sqlEquipCauseGroupbyRollupMariDB">
        <choose>
            <when test="targetNodeType == 'ENB'">
                GROUP BY BTS_NAME WITH ROLLUP
            </when>
            <when test="targetNodeType == 'VLAN'">
                GROUP BY VLAN_ID WITH ROLLUP
            </when>
            <when test="targetNodeType == 'IMSI'">
                GROUP BY IMSI WITH ROLLUP
            </when>
            <when test="targetNodeType == 'UEM'">
                GROUP BY IWF_ID WITH ROLLUP
            </when>
            <otherwise>
                GROUP BY ${targetNodeType}_ID WITH ROLLUP
            </otherwise>
        </choose>
    </sql>

    <select id="getTrendKpiAndCauseAnalysis" resultType="com.mobigen.cdev.poc.module.common.dto.common.TrendChartDto" parameterType="map" >
        WITH RECURSIVE STD AS
        (
            SELECT
                DATE_SUB(STR_TO_DATE(#{startTime}, '%Y%m%d%H%i%s'), INTERVAL 179 MINUTE) AS BASE_TIME
            UNION ALL
            SELECT
                DATE_ADD(STD.BASE_TIME, INTERVAL 1 MINUTE) AS BASE_TIME
            FROM STD
            WHERE STD.BASE_TIME &lt; STR_TO_DATE(#{startTime}, '%Y%m%d%H%i%s')
        )
        SELECT
                DATE_FORMAT(BASE_TIME, '%H:%i') AS EVENT_EXP_TIME
            ,   DATE_FORMAT(BASE_TIME, '%Y-%m-%d %H:%i:%s') AS EVENT_TIME
            ,	IFNULL(DATA1, 0) DATA1
            ,	IFNULL(DATA2, 0) DATA2
<!--            ,	CASE WHEN MAX(IFNULL(DATA1, 0)) > MAX(IFNULL(DATA2, 0)) THEN MAX(IFNULL(DATA1, 0)) ELSE MAX(IFNULL(DATA2, 0)) END MAX_DATA-->
        FROM
            STD
            LEFT OUTER JOIN
            (
                SELECT
                    EVENT_TIME
                    <include refid="selectedTargetNoSumField" /> DATA1
                FROM
                    <if test='trendType eq "KPI".toString()'>
                        <include refid="sqlDefKpiTable" />
                    </if>
                    <if test='trendType eq "ROOT_CAUSE".toString()'>
                        <include refid="sqlDefCauseTable" />
                    </if> A
                WHERE 1 = 1
                    <include refid="sqlKpiAnalysisMainCond" />
                    <include refid="sqlKpiAnalysisCallTypeCond" />
                    <if test='trendType eq "ROOT_CAUSE".toString()'>
                        <include refid="sqlTrendCauseCond" />
                        GROUP BY EVENT_TIME
                    </if>
            ) M1
            ON STD.BASE_TIME = M1.EVENT_TIME
            LEFT OUTER JOIN
            (
                SELECT
                    EVENT_TIME
                    <include refid="selectedTargetNoSumField" /> DATA2
                FROM
                    <if test='trendType eq "KPI".toString()'>
                        <include refid="sqlDefKpiTable" />
                    </if>
                    <if test='trendType eq "ROOT_CAUSE".toString()'>
                        <include refid="sqlDefCauseTable" />
                    </if> A
                WHERE 1 = 1
                    <include refid="sqlKpiAnalysisMainCond" />
                    <include refid="sqlKpiAnalysisCallTypeCond" />
                    <if test='trendType eq "ROOT_CAUSE".toString()'>
                        <include refid="sqlTrendCauseCond" />
                        GROUP BY EVENT_TIME
                    </if>
            ) M2
            ON
                <if test='compareType eq "lastDay".toString()'>
                    DATE_SUB(STD.BASE_TIME, INTERVAL 1 DAY) = M2.EVENT_TIME
                </if>
                <if test='compareType eq "lastWeek".toString()'>
                    DATE_SUB(STD.BASE_TIME, INTERVAL 1 WEEK) = M2.EVENT_TIME
                </if>
        ORDER BY STD.BASE_TIME
    </select>

    <sql id="sqlDefKpiTable">
        <if test='graphType eq "NODE".toString()'>
            <choose>
                <when test='node1Type eq "ENB".toString()'>PM_ENB_KPI_1M</when>
                <otherwise>PM_EPC_KPI_1M</otherwise>
            </choose>
        </if>
        <if test='graphType eq "LINK".toString()'>
            <choose>
                <when test='node1Type eq "ENB".toString()'>PM_LINK_ENB_KPI_1M</when>
                <otherwise>PM_LINK_EPC_KPI_1M</otherwise>
            </choose>
        </if>
    </sql>
    <sql id="sqlDefCauseTable">
        <if test='graphType eq "NODE".toString()'>
            <choose>
                <when test='node1Type eq "ENB".toString()'>PM_ENB_ROOT_CAUSE_1M</when>
                <otherwise>PM_EPC_ROOT_CAUSE_1M</otherwise>
            </choose>
        </if>
        <if test='graphType eq "LINK".toString()'>
            <choose>
                <when test='node1Type eq "ENB".toString()'>PM_LINK_ENB_ROOT_CAUSE_1M</when>
                <otherwise>PM_LINK_EPC_ROOT_CAUSE_1M</otherwise>
            </choose>
        </if>
    </sql>
    <sql id="sqlTrendCauseCond">
        AND A.FAIL_TYPE = #{failType}
        AND A.CAUSE = #{selectedVal}
    </sql>

    <sql id="selectedTargetNoSumField">
        <choose>
            <when test='trendType eq "ROOT_CAUSE"'>
                ,	SUM(CAUSE_CNT)
            </when>
            <otherwise>
                <choose>
                    <when test="selectedVal == 'SUCCESS_RATE'">
                        , CASE WHEN IFNULL(ATTEMPT_CNT, 0) != 0 THEN ROUND(((IFNULL(SUCCESS_CNT, 0) / ATTEMPT_CNT) * 100), 2) ELSE 0 END
                    </when>
                    <when test="selectedVal == 'DROP_RATE'">
                        , CASE WHEN IFNULL(DATA_SUCESS_CNT, 0) + IFNULL(IMS_SUCESS_CNT,0) != 0 THEN ROUND(((IFNULL(DROP_CNT, 0) / (IFNULL(DATA_SUCESS_CNT, 0) + IFNULL(IMS_SUCESS_CNT,0))) * 100), 2) ELSE 0 END
                    </when>
                    <when test="selectedVal == 'DATA_SUCCESS_RATE'">
                        , CASE WHEN IFNULL(DATA_ATTEMPT_CNT, 0) != 0 THEN ROUND(((IFNULL(DATA_SUCESS_CNT, 0) / DATA_ATTEMPT_CNT) * 100), 2) ELSE 0 END
                    </when>
                    <when test="selectedVal == 'IMS_SUCCESS_RATE'">
                        , CASE WHEN IFNULL(IMS_ATTEMPT_CNT, 0) != 0 THEN ROUND(((IFNULL(IMS_SUCESS_CNT, 0) / IMS_ATTEMPT_CNT) * 100), 2) ELSE 0 END
                    </when>
                    <when test="selectedVal == 'GAP_TIME'">
                        , CASE WHEN  IFNULL(ATTEMPT_CNT, 0) !=  0 THEN ROUND((GAP_TIME / ATTEMPT_CNT), 3) ELSE 0 END
                    </when>
                    <when test="selectedVal == 'DELAYED_GAP_CNT'">
                        , NVL(GAP_TIMEOVER_CNT, '0')
                    </when>
                    <otherwise>
                        <if test="selectedValType == 'CNT'">
                            , NVL(${selectedVal}, 0)
                        </if>
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </sql>
</mapper>
