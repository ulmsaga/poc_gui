<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mobigen.cdev.mapper.mysql.module.nw.search">

    <!-- ===== -->
    <!-- ===== -->
    <!-- Signal Call Trace / Fail Search (ORACLE :: GUAM) -->
    <select id="getSignalCallLogXdr" resultType="com.mobigen.cdev.poc.module.nw.dto.SignalXdrDto" parameterType="map" >
        <include refid="sqlSignalFailXdr"/>
    </select>
    <sql id="sqlSignalFailXdr">
        SELECT
            <include refid="sqlDefColSignalFailXdr" />
        FROM
            XDR_LTE_CALL_KPI A
            LEFT OUTER JOIN CL_MME M ON LPAD(A.MME_ID, 4, '0') = M.MME_ID
            LEFT OUTER JOIN CL_SGW S ON LPAD(A.SGW_ID, 4, '0') = S.SGW_ID
            LEFT OUTER JOIN CL_PGW P ON LPAD(A.PGW_ID, 4, '0') = P.PGW_ID
        WHERE 1 = 1

        <include refid="com.mobigen.cdev.mapper.mysql.module.nw.analysis.sqlKpiAnalysisEventTimeCond" />

        <if test="searchType=='CALL_FAIL'">
            AND ONGOINGFLAG = '2'
        </if>

        <!-- IMSI / MDN -->
        AND
        (
            (
                    A.IMSI IS NOT NULL
                AND	A.IMSI = #{imsi}
            )
            OR
            (
                    A.MDN IS NOT NULL
                AND	A.MDN = #{imsi}
            )
        )

        AND A.CALL_TYPE &lt; 9
        <if test='callTypeList!=null'>
            AND A.CALL_TYPE IN <foreach  item="item" index="index" collection="callTypeList" open="(" close=")" separator=",">#{item}</foreach>
        </if>
        <if test="searchType=='CALL_FAIL'">
            AND (
                SUCCESS_FLAG = 0 OR DROP_FLAG = 1 OR
                (DATA_ATTEMPT_FLAG = 1 AND DATA_SUCCESS_FLAG = 0) OR
                (IMS_ATTEMPT_FLAG = 1 AND IMS_SUCCESS_FLAG = 0)
            )
        </if>
        ORDER BY A.SUMMARYCREATETIME ASC
    </sql>

    <sql id="sqlDefColSignalFailXdr">
        DATE_FORMAT(A.EVENT_TIME, '%Y-%m-%d %H:%i:%s') EVENT_EXP_TIME
    ,	DATE_FORMAT(A.EVENT_TIME, '%Y%m%d%H%i%s') EVENT_TIME
    ,	CASE WHEN SUMMARYCREATETIME = 0 THEN '-' ELSE FROM_UNIXTIME(SUMMARYCREATETIME) END SUMMARYCREATETIME
    ,	CASE
            WHEN ONGOINGFLAG='0' THEN 'Start'
            WHEN ONGOINGFLAG='1' THEN 'Interim'
            WHEN ONGOINGFLAG='2' THEN 'End'
            ELSE '-'
        END ONGOINGFLAG
    ,	'1' MASKING_FLAG
    ,	IMSI
    ,	IMSI IMSI_ORIGINAL
    ,	MDN
    ,	IMEI
    ,	SERVICECODE
    ,	PAYCODE
    ,	CASE
            WHEN GENDER='1' THEN 'Male'
            WHEN GENDER='2' THEN 'Female'
            ELSE GENDER
        END GENDER
    ,	IFNULL(AGE,'-') AGE
    ,	IFNULL(A.VENDOR, '-') VENDOR
    ,	IFNULL(A.MODEL, '-') MODEL
    ,	IFNULL(P.NAME, A.PGW_ID) PGW_ID
    ,	IFNULL(P.NAME, A.IMS_PGW_ID) IMS_PGW_ID
    ,	IFNULL(S.NAME, A.SGW_ID) SGW_ID
    ,	A.MME_ID MME_ID_ORIGINAL
    ,	IFNULL(M.MME_NAME,(CASE WHEN A.MME_ID ='0' THEN '-' ELSE A.MME_ID END)) MME_ID
    ,   CASE
            WHEN S6A_AUTHENTICATION_EQUIP_TYPE='1' THEN 'AuC'
            WHEN S6A_AUTHENTICATION_EQUIP_TYPE='3' THEN 'GLR'
            WHEN S6A_AUTHENTICATION_EQUIP_TYPE='4' THEN 'IWF'
            ELSE '-'
        END S6A_AUTHENTICATION_EQUIP_TYPE
    ,	IFNULL(S6A_AUTHENTICATION_EQUIP_ID, '-') EQ_S6A_AUTHENTICATION_EQUIP_ID
    ,	CASE
            WHEN S6A_LOCATION_EQUIP_TYPE='2' THEN 'HLR'
            WHEN S6A_LOCATION_EQUIP_TYPE='3' THEN 'GLR'
            WHEN S6A_LOCATION_EQUIP_TYPE='4' THEN 'IWF'
            ELSE '-'
        END EQ_S6A_LOCATION_EQUIP_TYPE
    ,	IFNULL(S6A_LOCATION_EQUIP_ID, '-') EQ_S6A_LOCATION_EQUIP_ID
    ,	CASE
            WHEN S13_EQUIP_TYPE='4' THEN 'IWF'
            WHEN S13_EQUIP_TYPE='5' THEN 'EIR'
            ELSE '-'
        END EQ_S13_EQUIP_TYPE
    ,	IFNULL(S13_EQUIP_ID, '-') EQ_S13_EQUIP_ID
    ,	IFNULL((SELECT BTS_NAME || '(' || IFNULL(ENB_ID, '-') || ')' FROM CL_ENB WHERE ENB_ID = FIRST_ENB_ID), '-') FIRST_ENB_ID
    ,	IFNULL(FIRST_CELL_ID, '-') FIRST_CELL_ID
    ,	IFNULL(FIRST_ENB_VLAN_ID, '-') FIRST_ENB_VLAN_ID
    ,	CASE
            WHEN PDN_TYPE='1' THEN 'ipv4'
            WHEN PDN_TYPE='2' THEN 'ipv6'
            WHEN PDN_TYPE='3' THEN 'ipv4v6'
            ELSE '-'
        END PDN_TYPE
    ,	IFNULL((SELECT CONCAT(BTS_NAME, '(', IFNULL(ENB_ID, '-'), ')') FROM CL_ENB WHERE ENB_ID = LAST_ENB_ID), '-') LAST_ENB_ID
    ,	IFNULL(LAST_ENB_VLAN_ID ,'-') LAST_ENB_VLAN_ID
    ,	CASE IFNULL(PDN_IPV4, '-') WHEN '-' THEN  '-' ELSE INET_NTOA(PDN_IPV4) END PDN_IPV4
    ,	PDN_IPV6
    ,   CASE IFNULL(PDN_IPV6, '-')
            WHEN '-' THEN '-'
            ELSE
                CASE LENGTH(PDN_IPV6)
                    WHEN 32 THEN
                        CONCAT(
                            SUBSTR(PDN_IPV6, 1, 4), '0', ':',
                            SUBSTR(PDN_IPV6, 4 * 1 + 1, 4), '0', ':',
                            SUBSTR(PDN_IPV6, 4 * 2 + 1, 4), '0', ':',
                            SUBSTR(PDN_IPV6, 4 * 3 + 1, 4), '0', ':',
                            SUBSTR(PDN_IPV6, 4 * 4 + 1, 4), '0', ':',
                            SUBSTR(PDN_IPV6, 4 * 5 + 1, 4), '0', ':',
                            SUBSTR(PDN_IPV6, 4 * 6 + 1, 4), '0', ':',
                            SUBSTR(PDN_IPV6, 4 * 7 + 1, 4), '0'
                        )
                    ELSE PDN_IPV6
                END
        END PDN_IPV6
    ,	CASE
            WHEN OLD_CALL_TYPE='1' THEN 'Attach MO'
            WHEN OLD_CALL_TYPE='2' THEN 'Attach MT'
            WHEN OLD_CALL_TYPE='3' THEN 'Service MO'
            WHEN OLD_CALL_TYPE='4' THEN 'Service MT'
            WHEN OLD_CALL_TYPE='5' THEN 'TAU'
            WHEN OLD_CALL_TYPE='6' THEN 'Paging'
            WHEN OLD_CALL_TYPE='7' THEN 'ExtendedService MO'
            WHEN OLD_CALL_TYPE='8' THEN 'ExtendedService MT'
            WHEN OLD_CALL_TYPE='9' THEN 'Detach MO'
            WHEN OLD_CALL_TYPE='10' THEN 'S1 Handover Inter MME'
            ELSE '-'
        END OLD_CALL_TYPE
    ,	CASE WHEN OLD_CALL_END_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(OLD_CALL_END_TIME) END OLD_CALL_END_TIME
    ,	IFNULL((SELECT CONCAT(BTS_NAME, '(', IFNULL(ENB_ID, '-'), ')') FROM CL_ENB WHERE ENB_ID = OLD_CALL_LAST_ENB_ID), '-') OLD_CALL_LAST_ENB_ID
    ,	IFNULL(OLD_CALL_LAST_CELL_ID, '-') OLD_CALL_LAST_CELL_ID
    ,	IFNULL(OLD_CALL_LAST_TAC, '-') OLD_CALL_LAST_TAC
    ,	CASE
            WHEN CALL_TYPE='1' THEN 'Attach MO'
            WHEN CALL_TYPE='2' THEN 'Attach MT'
            WHEN CALL_TYPE='3' THEN 'Service MO'
            WHEN CALL_TYPE='4' THEN 'Service MT'
            WHEN CALL_TYPE='5' THEN 'TAU'
            WHEN CALL_TYPE='6' THEN 'Paging'
            WHEN CALL_TYPE='7' THEN 'ExtendedService MO'
            WHEN CALL_TYPE='8' THEN 'ExtendedService MT'
            WHEN CALL_TYPE='9' THEN 'Detach MO'
            WHEN CALL_TYPE='10' THEN 'S1 Handover Inter MME'
            ELSE '-'
        END CALL_TYPE
    ,	CASE WHEN CALL_START_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(CALL_START_TIME) END CALL_START_TIME
    ,	CASE WHEN CALL_END_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(CALL_END_TIME) END CALL_END_TIME
    ,	CASE WHEN CALL_DURATION_TIME ='0' THEN '-' ELSE CAST(ROUND(CALL_DURATION_TIME/1000000.0,2) AS CHAR) END CALL_DURATION_TIME
    ,	IFNULL(APN,'-') APN
    ,	IFNULL(IMS_APN ,'-') IMS_APN
    ,	IFNULL((SELECT MESSAGE_NAME FROM CD_MESSAGE WHERE PROTOCOL_CODE='01' AND MESSAGE_CODE_DEC =S6A_ERROR_MESSAGE),'-') DIAM_S6A_ERROR_MESSAGE
    ,	CASE WHEN S6A_ERROR_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(S6A_ERROR_TIME) END DIAM_S6A_ERROR_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_01', LPAD(S6A_ERROR_CAUSE,6,'0'))),'-') DIAM_S6A_ERROR_CAUSE
    ,	CASE WHEN AUTHINFORMATION_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(AUTHINFORMATION_TIME) END AUTHENTICATIONINFORMATION_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_01', LPAD(AUTHINFORMATION_CAUSE,6,'0'))),'-') AUTHINFOMATION_CAUSE
    ,	CASE WHEN UPDATELOCATION_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(UPDATELOCATION_TIME) END UPDATELOCATION_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_01', LPAD(UPDATELOCATION_CAUSE,6,'0'))),'-') UPDATELOCATION_CAUSE
    ,	IFNULL((SELECT MESSAGE_NAME FROM CD_MESSAGE WHERE PROTOCOL_CODE='01' AND MESSAGE_CODE_DEC =S13_ERROR_MESSAGE),'-') DIAM_S13_ERROR_MESSAGE
    ,	CASE WHEN S13_ERROR_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(S13_ERROR_TIME) END DIAM_S13_ERROR_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_01', LPAD(S13_ERROR_CAUSE,6,'0'))),'-') DIAM_S13_ERROR_CAUSE
    ,	CASE WHEN MEIDENTITYCHECK_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(MEIDENTITYCHECK_TIME) END MEIDENTITYCHECK_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_01', LPAD(MEIDENTITYCHECK_CAUSE,6,'0'))),'-')  MEIDENTITYCHECK_CAUSE
    ,	IFNULL((SELECT MESSAGE_NAME FROM CD_MESSAGE WHERE PROTOCOL_CODE='02' AND MESSAGE_CODE_DEC =S1AP_ERROR_MESSAGE),'-') SMME_S1AP_ERROR_MESSAGE
    ,	CASE WHEN S1AP_ERROR_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(S1AP_ERROR_TIME) END SMME_S1AP_ERROR_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_02', LPAD(S1AP_ERROR_CAUSE,6,'0'))),'-') SMME_S1AP_ERROR_CAUSE
    ,   CASE
            WHEN CNDOMAIN='0' THEN 'PS'
            WHEN CNDOMAIN='1' THEN 'CS'
            ELSE '-'
        END CNDOMAIN
    ,	CASE
            WHEN INITMSG_RRC_ESTABLISH_CAUSE='0' THEN 'Emergency'
            WHEN INITMSG_RRC_ESTABLISH_CAUSE='1' THEN 'HighPriorityAccess'
            WHEN INITMSG_RRC_ESTABLISH_CAUSE='2' THEN 'MT_ACCESS'
            WHEN INITMSG_RRC_ESTABLISH_CAUSE='3' THEN 'MO_Signalling'
            WHEN INITMSG_RRC_ESTABLISH_CAUSE='4' THEN 'MO_DATA'
            ELSE '-'
        END INITMSG_RRC_ESTABLISH_CAUSE
    ,	IFNULL(PATHSWITCH_COUNT, 0) PATHSWITCH_COUNT
    ,	IFNULL(PATHSWITCHFAILURE_COUNT, 0) PATHSWITCHFAILURE_COUNT
    ,	CASE WHEN UECONTEXTRELEASEREQUEST_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(UECONTEXTRELEASEREQUEST_TIME) END UECONTEXTRELEASEREQUEST_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_02', LPAD(UECONTEXTRELEASEREQUEST_CAUSE,6,'0'))),'-') UECONTEXTRELEASEREQUEST_CAUSE
    ,	CASE WHEN UECONTEXTRELEASE_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(UECONTEXTRELEASE_TIME) END UECONTEXTRELEASE_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_02', LPAD(UECONTEXTRELEASE_CAUSE,6,'0'))),'-') UECONTEXTRELEASE_CAUSE
    ,	IFNULL((SELECT MESSAGE_NAME FROM CD_MESSAGE WHERE PROTOCOL_CODE='05' AND MESSAGE_CODE_DEC =EMM_ERROR_MESSAGE),'-') EMM_ERROR_MESSAGE
    ,	CASE WHEN EMM_ERROR_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(EMM_ERROR_TIME) END EMM_ERROR_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_05', LPAD(EMM_ERROR_CAUSE,6,'0'))),'-') EMM_ERROR_CAUSE
    ,	CASE WHEN DETACHREQUEST_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(DETACHREQUEST_TIME) END DETACHREQUEST_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_05', LPAD(DETACHREQUEST_CAUSE,6,'0'))),'-') DETACHREQUEST_CAUSE
    ,	CASE
            WHEN DETACHREQUEST_DIRECTION='0' THEN
                (
                    CASE
                        WHEN DETACHREQUEST_TYPE='1' THEN 'EPC detach'
                        WHEN DETACHREQUEST_TYPE='2' THEN 'IMSI detach'
                        WHEN DETACHREQUEST_TYPE='3' THEN 'combined EPS/IMSI detach'
                        ELSE '-'
                    END
                )
            WHEN DETACHREQUEST_DIRECTION='1' THEN
                (
                CASE
                WHEN DETACHREQUEST_TYPE='1' THEN 're-attach required'
                WHEN DETACHREQUEST_TYPE='2' THEN 're-attach not required'
                WHEN DETACHREQUEST_TYPE='3' THEN 'IMSI detach'
                ELSE '-'
                END
                )
            ELSE '-'
        END DETACHREQUEST_TYPE
    ,	CASE
            WHEN DETACHREQUEST_SWITCHOFF='0' THEN 'normal detach'
            WHEN DETACHREQUEST_SWITCHOFF='1' THEN 'switch off'
            ELSE '-'
        END DETACHREQUEST_SWITCHOFF
    ,	CASE
            WHEN DETACHREQUEST_DIRECTION='0' THEN 'uplink'
            WHEN DETACHREQUEST_DIRECTION='1' THEN 'downlink'
            ELSE '-'
        END DETACHREQUEST_DIRECTION
    ,	IFNULL((SELECT MESSAGE_NAME FROM CD_MESSAGE WHERE PROTOCOL_CODE='06' AND MESSAGE_CODE_DEC =ESM_ERROR_MESSAGE),'-')  ESM_ERROR_MESSAGE
    ,	CASE WHEN UECONTEXTRELEASEREQUEST_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(UECONTEXTRELEASEREQUEST_TIME) END UECONTEXTRELEASEREQUEST_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_02', LPAD(UECONTEXTRELEASEREQUEST_CAUSE,6,'0'))),'-') UECONTEXTRELEASEREQUEST_CAUSE
    ,	CASE WHEN UECONTEXTRELEASE_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(UECONTEXTRELEASE_TIME) END UECONTEXTRELEASE_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_02', LPAD(UECONTEXTRELEASE_CAUSE,6,'0'))),'-') UECONTEXTRELEASE_CAUSE
    ,	IFNULL((SELECT MESSAGE_NAME FROM CD_MESSAGE WHERE PROTOCOL_CODE='05' AND MESSAGE_CODE_DEC =EMM_ERROR_MESSAGE),'-') EMM_ERROR_MESSAGE
    ,	CASE WHEN EMM_ERROR_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(EMM_ERROR_TIME) END EMM_ERROR_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_05', LPAD(EMM_ERROR_CAUSE,6,'0'))),'-') EMM_ERROR_CAUSE
    ,	CASE WHEN DETACHREQUEST_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(DETACHREQUEST_TIME) END DETACHREQUEST_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_07', LPAD(S3_ERROR_CAUSE,6,'0'))),'-') GTP_S3_ERROR_CAUSE
    ,	SMS_MO_CP_ERROR_CAUSE
    ,	SMS_MO_RP_ERROR_CAUSE
    ,	SMS_MO_TP_ERROR_CAUSE
    ,	SMS_MT_CP_ERROR_CAUSE
    ,	SMS_MT_RP_ERROR_CAUSE
    ,	SMS_MT_TP_ERROR_CAUSE
    ,	ATTEMPT_FLAG
    ,	SUCCESS_FLAG
    ,	DATA_ATTEMPT_FLAG
    ,	DATA_SUCCESS_FLAG
    ,	IMS_ATTEMPT_FLAG
    ,	IMS_SUCCESS_FLAG
    ,	DROP_FLAG
    ,	PAGING_ATTEMPT_FLAG
    ,	PAGING_SUCCESS_FLAG
    ,	DETACH_FLAG
    ,	NPR_FLAG
    ,	AUTH_ATTEMPT_FLAG
    ,	AUTH_SUCCESS_FLAG
    ,	LOCATION_ATTEMPT_FLAG
    ,	LOCATION_SUCCESS_FLAG
    ,	MECHECK_ATTEMPT_FLAG
    ,	MECHECK_SUCCESS_FLAG
    ,	CASE
            WHEN FIRST_ERROR_INTERFACE_PROTOCOL='1' THEN 'S6a_Diameter'
            WHEN FIRST_ERROR_INTERFACE_PROTOCOL='2' THEN 'S1MME_S1AP'
            WHEN FIRST_ERROR_INTERFACE_PROTOCOL='3' THEN 'S11_GTPv2C'
            WHEN FIRST_ERROR_INTERFACE_PROTOCOL='4' THEN 'S10_GTPv2C'
            WHEN FIRST_ERROR_INTERFACE_PROTOCOL='5' THEN 'S1MME_NAS-EMM'
            WHEN FIRST_ERROR_INTERFACE_PROTOCOL='6' THEN 'S1MME_NAS-ESM'
            WHEN FIRST_ERROR_INTERFACE_PROTOCOL='7' THEN 'S3_GTPv1C'
            WHEN FIRST_ERROR_INTERFACE_PROTOCOL='8' THEN 'S13_Diameter'
            ELSE '-'
        END FIRST_ERROR_INTERFACE_PROTOCOL
    ,	IFNULL((SELECT MESSAGE_NAME FROM CD_MESSAGE WHERE PROTOCOL_CODE=LPAD(FIRST_ERROR_INTERFACE_PROTOCOL,2,'0') AND MESSAGE_CODE_DEC =FIRST_ERROR_MESSAGE),'-') FIRST_ERROR_MESSAGE
    ,	CASE WHEN FIRST_ERROR_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(FIRST_ERROR_TIME) END FIRST_ERROR_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_0', FIRST_ERROR_INTERFACE_PROTOCOL, LPAD(FIRST_ERROR_CAUSE,6,'0'))),'-') FIRST_ERROR_CAUSE
    ,	CASE
            WHEN LAST_ERROR_INTERFACE_PROTOCOL='1' THEN 'S6a_Diameter'
            WHEN LAST_ERROR_INTERFACE_PROTOCOL='2' THEN 'S1MME_S1AP'
            WHEN LAST_ERROR_INTERFACE_PROTOCOL='3' THEN 'S11_GTPv2C'
            WHEN LAST_ERROR_INTERFACE_PROTOCOL='4' THEN 'S10_GTPv2C'
            WHEN LAST_ERROR_INTERFACE_PROTOCOL='5' THEN 'S1MME_NAS-EMM'
            WHEN LAST_ERROR_INTERFACE_PROTOCOL='6' THEN 'S1MME_NAS-ESM'
            WHEN LAST_ERROR_INTERFACE_PROTOCOL='7' THEN 'S3_GTPv1C'
            WHEN LAST_ERROR_INTERFACE_PROTOCOL='8' THEN 'S13_Diameter'
            ELSE '-'
        END LAST_ERROR_INTERFACE_PROTOCOL
    ,	IFNULL((SELECT MESSAGE_NAME FROM CD_MESSAGE WHERE PROTOCOL_CODE=LPAD(LAST_ERROR_INTERFACE_PROTOCOL,2,'0') AND MESSAGE_CODE_DEC =LAST_ERROR_MESSAGE),'-') LAST_ERROR_MESSAGE
    ,	CASE WHEN LAST_ERROR_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(LAST_ERROR_TIME) END LAST_ERROR_TIME
    ,	IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_0', LAST_ERROR_INTERFACE_PROTOCOL, LPAD(LAST_ERROR_CAUSE,6,'0'))),'-')  LAST_ERROR_CAUSE
    ,	CASE
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='1' THEN 'S6a_Diameter'
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='2' THEN 'S1MME_S1AP'
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='3' THEN 'S11_GTPv2C'
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='4' THEN 'S10_GTPv2C'
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='5' THEN 'S1MME_NAS-EMM'
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='6' THEN 'S1MME_NAS-ESM'
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='7' THEN 'S3_GTPv1C'
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='8' THEN 'S13_Diameter'
            ELSE '-'
        END OLD_CALL_ERROR_INTF_PROTOCOL
    ,	CASE
            WHEN IFNULL(OLD_CALL_ERROR_INF_PROTOCOL, '-')='-' THEN '-'
            WHEN IFNULL(OLD_CALL_ERROR_CAUSE, '-')='-' THEN '-'
            ELSE
            IFNULL((SELECT DESCRIPTION FROM CD_CAUSE WHERE CAUSE_CODE =CONCAT('C_0', OLD_CALL_ERROR_INF_PROTOCOL, LPAD(OLD_CALL_ERROR_CAUSE,6,'0'))),'-')
        END OLD_CALL_ERROR_CAUSE
    ,	IFNULL((SELECT CONCAT(BTS_NAME, '(', IFNULL(ENB_ID, '-'), ')') FROM CL_ENB WHERE ENB_ID = INTERVAL_FIRST_ENB_ID), '-') INTERVAL_FIRST_ENB_ID
    ,	CASE
            WHEN INTERVAL_FIRST_ENB_IP ='0' THEN '-'
            ELSE INET_NTOA(INTERVAL_FIRST_ENB_IP)
        END INTERVAL_FIRST_ENB_IP
    ,	CASE WHEN INTERVAL_FIRST_CELL_ID ='0' THEN '-' ELSE INTERVAL_FIRST_CELL_ID END INTERVAL_FIRST_CELL_ID
    ,	CASE WHEN INTERVAL_FIRST_TAC ='0' THEN '-' ELSE INTERVAL_FIRST_TAC END INTERVAL_FIRST_TAC
    ,	CASE WHEN INTERVAL_FIRST_ENB_C_UID ='0' THEN '-' ELSE INTERVAL_FIRST_ENB_C_UID END INTERVAL_FIRST_ENB_C_UID
    ,	IFNULL(INTERVAL_FIRST_ENB_VLAN_ID,'-') INTERVAL_FIRST_ENB_VLAN_ID
    ,	CASE WHEN INTERVAL_CALL_START_TIME = 0 THEN '-' ELSE FROM_UNIXTIME(INTERVAL_CALL_START_TIME) END INTERVAL_CALL_START_TIME
    </sql>
    <!-- ===== -->
    <!-- ===== -->

    <select id="getPaketTargetFile" resultType="com.mobigen.cdev.poc.core.file.dto.FileDto" parameterType="map" >
        SELECT
            FILE_PATH TARGET_FILE_PATH
        ,   FILE_NAME
        FROM CU_PACKET_FILE cpf
        WHERE 1 = 1
        AND EVENT_TIME = DATE_FORMAT(#{startTime}, '%Y%m%d%H%i%s')
        AND IMSI = #{imsi}
        AND ENV_STATUS = #{envStatus}
    </select>
</mapper>